{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tags",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Cmp_DIC",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Cmp_NIS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Cmp_NotCrtr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Cmp_UpkNN",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CampaignCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        }
      ],
      "name": "CampaignExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        }
      ],
      "name": "CampaignSuccessful",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        }
      ],
      "name": "CreatorPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        }
      ],
      "name": "FundingRecieved",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aggrDonations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "c_mode",
      "outputs": [
        {
          "internalType": "enum Campaign.C_Mode",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "c_state",
      "outputs": [
        {
          "internalType": "enum Campaign.C_State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceID",
          "type": "uint256"
        }
      ],
      "name": "deleteReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donator",
          "type": "address"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCampaignDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "i_creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "s_title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "s_description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "s_category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "s_tags",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "goalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBalance",
              "type": "uint256"
            },
            {
              "internalType": "enum Campaign.C_State",
              "name": "currentC_State",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "s_imageURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "s_campaignURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct Campaign.CampaignObject",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donator",
          "type": "address"
        }
      ],
      "name": "getDonations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceID",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "perks",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "delDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "infinite",
              "type": "bool"
            },
            {
              "internalType": "string[]",
              "name": "shipsTo",
              "type": "string[]"
            }
          ],
          "internalType": "struct Campaign.reward",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardKeys",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "goalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_creator",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_perks",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_infinite",
          "type": "bool"
        },
        {
          "internalType": "string[]",
          "name": "_shipsTo",
          "type": "string[]"
        }
      ],
      "name": "makeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rKeys",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "delDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "infinite",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_campaignURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_category",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_imageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tags",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_title",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_upkeepCreatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        }
      ],
      "name": "timeBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_campaignURI",
          "type": "string"
        }
      ],
      "name": "updateCampaignURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_addedDur",
          "type": "uint256"
        }
      ],
      "name": "updateDur",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xca7368386cbc2f50e9e511b1bcaf5b14c56895e11a4618d1eef053a16078df27",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3719659",
    "logsBloom": "0x
    "blockHash": "0x6989e461a07d87d06d1ebae84913b6803e7d84f50d00cdd0ac6e3d47e36597cc",
    "transactionHash": "0xca7368386cbc2f50e9e511b1bcaf5b14c56895e11a4618d1eef053a16078df27",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3719659",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "Piratopia: Raiders of Pirate Bay",
    "A P2E masterpiece on the AVAX chain",
    "P2E",
    "arcade games/adventure games/web3 gaming",
    "6750000000000000000",
    "1296000",
    "ipfs://QmV9inF2YC5MFUHWwWaCBEVJzj9aGSKmpay7mPSJDjBC4w"
  ],
  "numDeployments": 1,
  "solcInputHash": "dc3b289c421376d0f3a7ddfab39bc95f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tags\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Cmp_DIC\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cmp_NIS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cmp_NotCrtr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cmp_UpkNN\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CampaignCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"}],\"name\":\"CampaignExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"}],\"name\":\"CampaignSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"}],\"name\":\"CreatorPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"FundingRecieved\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggrDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c_mode\",\"outputs\":[{\"internalType\":\"enum Campaign.C_Mode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c_state\",\"outputs\":[{\"internalType\":\"enum Campaign.C_State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceID\",\"type\":\"uint256\"}],\"name\":\"deleteReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donator\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"i_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"s_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s_category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s_tags\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"enum Campaign.C_State\",\"name\":\"currentC_State\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"s_imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s_campaignURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Campaign.CampaignObject\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donator\",\"type\":\"address\"}],\"name\":\"getDonations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceID\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"perks\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"delDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"infinite\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"shipsTo\",\"type\":\"string[]\"}],\"internalType\":\"struct Campaign.reward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardKeys\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_creator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_perks\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_infinite\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"_shipsTo\",\"type\":\"string[]\"}],\"name\":\"makeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"delDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"infinite\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_campaignURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_category\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tags\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upkeepCreatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"}],\"name\":\"timeBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_campaignURI\",\"type\":\"string\"}],\"name\":\"updateCampaignURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addedDur\",\"type\":\"uint256\"}],\"name\":\"updateDur\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"this is the function chainlink keepers calls chekupkeep returns true to trigger the action after the interval has passed\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Cmp_NotCrtr()\":[{\"notice\":\"not in state \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice OnchainConfig of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct OnchainConfig {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint32 maxCheckDataSize;\\n  uint32 maxPerformDataSize;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member totalPremium the total premium collected on registry so far\\n * @member numUpkeeps total number of upkeeps on the registry\\n * @member configCount ordinal number of current config, out of all configs applied to this contract so far\\n * @member latestConfigBlockNumber last block at which this config was set\\n * @member latestConfigDigest domain-separation tag for current config\\n * @member latestEpoch for which a report was transmitted\\n * @member paused freeze on execution scoped to the entire registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint96 totalPremium;\\n  uint256 numUpkeeps;\\n  uint32 configCount;\\n  uint32 latestConfigBlockNumber;\\n  bytes32 latestConfigDigest;\\n  uint32 latestEpoch;\\n  bool paused;\\n}\\n\\n/**\\n * @notice all information about an upkeep\\n * @dev only used in return values\\n * @member target the contract which needs to be serviced\\n * @member executeGas the gas limit of upkeep execution\\n * @member checkData the checkData bytes for this upkeep\\n * @member balance the balance of this upkeep\\n * @member admin for this upkeep\\n * @member maxValidBlocknumber until which block this upkeep is valid\\n * @member lastPerformBlockNumber the last block number when this upkeep was performed\\n * @member amountSpent the amount this upkeep has spent\\n * @member paused if this upkeep has been paused\\n * @member skipSigVerification skip signature verification in transmit for a low security low cost model\\n */\\nstruct UpkeepInfo {\\n  address target;\\n  uint32 executeGas;\\n  bytes checkData;\\n  uint96 balance;\\n  address admin;\\n  uint64 maxValidBlocknumber;\\n  uint32 lastPerformBlockNumber;\\n  uint96 amountSpent;\\n  bool paused;\\n  bytes offchainConfig;\\n}\\n\\nenum UpkeepFailureReason {\\n  NONE,\\n  UPKEEP_CANCELLED,\\n  UPKEEP_PAUSED,\\n  TARGET_CHECK_REVERTED,\\n  UPKEEP_NOT_NEEDED,\\n  PERFORM_DATA_EXCEEDS_LIMIT,\\n  INSUFFICIENT_BALANCE\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData,\\n    bytes calldata offchainConfig\\n  ) external returns (uint256 id);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function pauseUpkeep(uint256 id) external;\\n\\n  function unpauseUpkeep(uint256 id) external;\\n\\n  function transferUpkeepAdmin(uint256 id, address proposed) external;\\n\\n  function acceptUpkeepAdmin(uint256 id) external;\\n\\n  function updateCheckData(uint256 id, bytes calldata newCheckData) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function setUpkeepOffchainConfig(uint256 id, bytes calldata config) external;\\n\\n  function getUpkeep(uint256 id) external view returns (UpkeepInfo memory upkeepInfo);\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getTransmitterInfo(address query)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      uint8 index,\\n      uint96 balance,\\n      uint96 lastCollected,\\n      address payee\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory state,\\n      OnchainConfig memory config,\\n      address[] memory signers,\\n      address[] memory transmitters,\\n      uint8 f\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    view\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\",\"keccak256\":\"0x9faf0551509440bd9c25a4a2f14b23bce2f82e5ab5691058b9664edab808468c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport { UpkeepIDConsumer } from \\\"./UpkeepIDConsumer.sol\\\";\\r\\nimport { LinkTokenInterface } from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\n// errors\\r\\nerror Cmp_NIS(); /**not in state */\\r\\nerror Cmp_NotCrtr();\\r\\nerror Cmp_DIC(); /**donator is creator */\\r\\nerror Cmp_NoDns();\\r\\nerror Cmp_RefF();\\r\\nerror Cmp_UpkNN();\\r\\nerror Cmp_NotRef();\\r\\nerror Cmp_Bankrupt();\\r\\n\\r\\ncontract Campaign is KeeperCompatibleInterface, ReentrancyGuard{\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // enums\\r\\n  enum C_State {\\r\\n    Fundraising,\\r\\n    Expired,\\r\\n    Canceled\\r\\n  }\\r\\n\\r\\n  enum C_Mode {\\r\\n    Draft,\\r\\n    Published\\r\\n  }\\r\\n\\r\\n  // c_state variables\\r\\n  address payable immutable public i_creator;\\r\\n  string public s_title;\\r\\n  string public s_description;\\r\\n  string public s_category;\\r\\n  string public s_imageURI;\\r\\n  string public s_campaignURI;\\r\\n  string public s_tags;\\r\\n  uint256 public goalAmount;\\r\\n  uint256 public duration;\\r\\n  uint256 public currentBalance;\\r\\n  uint256 private immutable i_initTimeStamp;\\r\\n  uint256 private constant i_maxDur = 5184000;\\r\\n  uint256 public deadline;\\r\\n  C_Mode public c_mode = C_Mode.Draft;\\r\\n  C_State public c_state = C_State.Fundraising; // default c_state\\r\\n  uint256 private rId;\\r\\n\\r\\n  struct CampaignObject {\\r\\n    address i_creator;\\r\\n    string s_title;\\r\\n    string s_description;\\r\\n    string s_category;\\r\\n    string s_tags;\\r\\n    uint256 goalAmount;\\r\\n    uint256 duration;\\r\\n    uint256 currentBalance;\\r\\n    C_State currentC_State;\\r\\n    string s_imageURI;\\r\\n    string s_campaignURI;\\r\\n    uint256 deadline;\\r\\n  }\\r\\n\\r\\n  struct reward {\\r\\n    uint256 price;\\r\\n    string title;\\r\\n    string description;\\r\\n    string[] perks;\\r\\n    uint256 delDate;\\r\\n    uint256 quantity;\\r\\n    bool infinite;\\r\\n    string[] shipsTo;\\r\\n  }\\r\\n\\r\\n  mapping (uint256 => reward) public rewards;\\r\\n  mapping (address => uint256[]) public donations;\\r\\n  mapping (address => uint256) public aggrDonations;\\r\\n\\r\\n  uint256[] public rKeys;\\r\\n\\r\\n\\r\\n  // events\\r\\n  event FundingRecieved (\\r\\n    address indexed contributor,\\r\\n    uint256 amount,\\r\\n    uint256 currentBalance\\r\\n  );\\r\\n  event CreatorPaid(address creator, address campaignAddress);\\r\\n  event CampaignSuccessful(address campaignAddress);\\r\\n  event CampaignExpired(address campaignAddress);\\r\\n  event CampaignCanceled();\\r\\n\\r\\n\\r\\n  // modifiers\\r\\n  modifier isCreator() {\\r\\n    if(msg.sender != i_creator){revert Cmp_NotCrtr();}\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n  constructor (\\r\\n    address _creator,\\r\\n    string memory _title,\\r\\n    string memory _description,\\r\\n    string memory _category,\\r\\n    string memory _tags,\\r\\n    uint256 _goalAmount,\\r\\n    uint256 _duration,\\r\\n    string memory _imageURI\\r\\n  ) {\\r\\n    i_creator = payable(_creator);\\r\\n    s_title = _title;\\r\\n    s_description = _description;\\r\\n    s_category = _category;\\r\\n    s_tags = _tags;\\r\\n    goalAmount = _goalAmount;\\r\\n    i_initTimeStamp = block.timestamp;\\r\\n    duration = _duration > i_maxDur ? i_maxDur : _duration;\\r\\n    deadline = i_initTimeStamp.add(duration);\\r\\n    s_imageURI = _imageURI;\\r\\n    currentBalance = 0;\\r\\n  }\\r\\n\\r\\n  function timeBox(address _upkeepCreatorAddress, address _linkTokenAddress, address _campaignAddress) external isCreator {\\r\\n    UpkeepIDConsumer newUpkeepCreator = UpkeepIDConsumer(_upkeepCreatorAddress);\\r\\n    LinkTokenInterface token = LinkTokenInterface(_linkTokenAddress);\\r\\n    if(token.balanceOf(_upkeepCreatorAddress) == 0){revert(\\\"no funds\\\");}\\r\\n    rId = newUpkeepCreator.registerAndPredictID(s_title, \\\"0x\\\", _campaignAddress, 500000, i_creator, \\\"0x\\\", \\\"0x\\\", 2000000000000000000);\\r\\n    c_mode = C_Mode.Published;\\r\\n  }\\r\\n\\r\\n  function donate(address _donator) public payable nonReentrant{\\r\\n    if(c_state != C_State.Fundraising){revert Cmp_NIS();}\\r\\n    if(_donator == i_creator){revert Cmp_DIC();}\\r\\n    currentBalance = currentBalance.add(msg.value);\\r\\n    if(rewards[msg.value].price > 0 && !rewards[msg.value].infinite) //exists and is not infinite\\r\\n    {\\r\\n      rewards[msg.value].quantity.sub(1);\\r\\n      if(rewards[msg.value].quantity == 0){delete(rewards[msg.value]);}\\r\\n    }\\r\\n    donations[_donator].push(msg.value);\\r\\n    aggrDonations[_donator] = aggrDonations[_donator].add(msg.value);\\r\\n    emit FundingRecieved(_donator, msg.value, currentBalance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev this is the function chainlink keepers calls\\r\\n    chekupkeep returns true to trigger the action after the interval has passed\\r\\n   */\\r\\n  function checkUpkeep(bytes memory /**checkData */) public view override\\r\\n  returns (bool upkeepNeeded, bytes memory /**performData */) \\r\\n  {\\r\\n    bool isOpen = c_state == C_State.Fundraising;\\r\\n    bool timePassed = ((block.timestamp.sub(i_initTimeStamp)) > duration);\\r\\n    bool hasBalance = address(this).balance > 0;\\r\\n    upkeepNeeded = (timePassed && isOpen && hasBalance) ;\\r\\n    return (upkeepNeeded, \\\"0x0\\\");\\r\\n  }\\r\\n\\r\\n  function performUpkeep(bytes calldata /**performData */) external override {\\r\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n    if(!upkeepNeeded){revert Cmp_UpkNN();}\\r\\n    c_state = C_State.Expired;\\r\\n    emit CampaignExpired(address(this));\\r\\n    if(currentBalance >= goalAmount){\\r\\n      emit CampaignSuccessful(address(this));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function payout() external isCreator{\\r\\n    if(c_state != C_State.Expired){revert Cmp_NIS();}\\r\\n    uint256 totalRaised = currentBalance;\\r\\n    currentBalance = 0;\\r\\n    (bool success, ) = i_creator.call{value: totalRaised}(\\\"\\\");\\r\\n    if(success){\\r\\n      emit CreatorPaid(i_creator, address(this));\\r\\n    }\\r\\n    else{revert();}\\r\\n  }\\r\\n\\r\\n  function refund(address _donator) internal nonReentrant{\\r\\n    if(c_state == C_State.Expired){revert Cmp_NIS();}\\r\\n    if(aggrDonations[_donator] == 0 ){revert Cmp_NoDns();}\\r\\n    uint256 amountToRefund = aggrDonations[_donator];\\r\\n    if(currentBalance < amountToRefund){revert Cmp_Bankrupt();}\\r\\n    currentBalance = currentBalance.sub(amountToRefund);\\r\\n    (bool success, ) = payable(_donator).call{value: amountToRefund}(\\\"\\\");\\r\\n    if(!success){revert Cmp_RefF();}\\r\\n    delete(donations[_donator]);\\r\\n    delete(aggrDonations[_donator]);\\r\\n  }\\r\\n\\r\\n  function makeReward( \\r\\n    uint256 _price, string memory _title, \\r\\n    string memory _description, string[] memory _perks, \\r\\n    uint256 _deadline, uint256 _quantity, bool _infinite, string[] memory _shipsTo\\r\\n    ) external isCreator {\\r\\n    rKeys.push(_price);\\r\\n    // shipsto _NW, infinite true, quantitymax 100  (for digRewards)  shipsto _AITW for phyRewards\\r\\n    rewards[_price] = reward(_price, _title, _description, _perks, _deadline, _quantity, _infinite, _shipsTo);\\r\\n  }\\r\\n\\r\\n  function deleteReward(uint256 _priceID) external isCreator {\\r\\n    if(c_mode != C_Mode.Draft){revert();}\\r\\n    if(rewards[_priceID].price > 0){delete(rewards[_priceID]);}\\r\\n  }\\r\\n\\r\\n  function endCampaign() external isCreator {\\r\\n    if(c_state == C_State.Expired){revert();}\\r\\n    c_state = C_State.Canceled;\\r\\n    emit CampaignCanceled();\\r\\n  }\\r\\n\\r\\n  // update functions\\r\\n  function updateCampaignURI(string memory _campaignURI) external isCreator {\\r\\n    s_campaignURI = _campaignURI;\\r\\n  }\\r\\n\\r\\n  function updateDur(uint256 _addedDur) external isCreator {\\r\\n    duration = ((duration.add(_addedDur)) > i_maxDur) ? i_maxDur : duration.add(_addedDur);\\r\\n    deadline = i_initTimeStamp.add(duration);\\r\\n  }\\r\\n\\r\\n  // getter functions\\r\\n  function getDonations(address _donator) external view returns(uint256[] memory) {\\r\\n    return donations[_donator];\\r\\n  }\\r\\n\\r\\n  function getRewardKeys() external view returns(uint256[] memory){\\r\\n    return rKeys;\\r\\n  }\\r\\n  \\r\\n  function getReward(uint256 _priceID) external view returns (reward memory) {\\r\\n    return rewards[_priceID];\\r\\n  }\\r\\n\\r\\n  function getCampaignDetails() external view returns(CampaignObject memory) {\\r\\n    return CampaignObject(\\r\\n      i_creator,\\r\\n      s_title,\\r\\n      s_description,\\r\\n      s_category,\\r\\n      s_tags,\\r\\n      goalAmount,\\r\\n      duration,\\r\\n      currentBalance,\\r\\n      c_state,\\r\\n      s_imageURI,\\r\\n      s_campaignURI,\\r\\n      deadline\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // fallback functions\\r\\n  fallback() external payable {\\r\\n    donate(msg.sender);\\r\\n  }\\r\\n  receive() external payable {\\r\\n    donate(msg.sender);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf008c3e44d9b721c41b8220bc81a28185ebba84fc97eb218f512c80d2da6b1e4\",\"license\":\"MIT\"},\"contracts/UpkeepIDConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n// UpkeepIDConsumerExample.sol imports functions from both ./AutomationRegistryInterface2_0.sol and\\r\\n// ./interfaces/LinkTokenInterface.sol\\r\\n\\r\\nimport {AutomationRegistryInterface, State, OnchainConfig} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\r\\n * DO NOT USE THIS CODE IN PRODUCTION.\\r\\n */\\r\\n\\r\\ninterface KeeperRegistrarInterface {\\r\\n    function register(\\r\\n        string memory name,\\r\\n        bytes calldata encryptedEmail,\\r\\n        address upkeepContract,\\r\\n        uint32 gasLimit,\\r\\n        address adminAddress,\\r\\n        bytes calldata checkData,\\r\\n        bytes calldata offchainConfig,\\r\\n        uint96 amount,\\r\\n        address sender\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract UpkeepIDConsumer {\\r\\n    LinkTokenInterface public immutable i_link;\\r\\n    address public immutable registrar;\\r\\n    AutomationRegistryInterface public immutable i_registry;\\r\\n    bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\r\\n\\r\\n    constructor(\\r\\n        LinkTokenInterface _link,\\r\\n        address _registrar,\\r\\n        AutomationRegistryInterface _registry\\r\\n    ) {\\r\\n        i_link = _link;\\r\\n        registrar = _registrar;\\r\\n        i_registry = _registry;\\r\\n    }\\r\\n\\r\\n    function registerAndPredictID(\\r\\n        string memory name,\\r\\n        bytes calldata encryptedEmail,\\r\\n        address upkeepContract,\\r\\n        uint32 gasLimit,\\r\\n        address adminAddress,\\r\\n        bytes calldata checkData,\\r\\n        bytes calldata offchainConfig,\\r\\n        uint96 amount\\r\\n    ) public returns(uint256) {\\r\\n        (State memory state, , , , ) = i_registry.getState();\\r\\n        uint256 oldNonce = state.nonce;\\r\\n        bytes memory payload = abi.encode(\\r\\n            name,\\r\\n            encryptedEmail,\\r\\n            upkeepContract,\\r\\n            gasLimit,\\r\\n            adminAddress,\\r\\n            checkData,\\r\\n            offchainConfig,\\r\\n            amount,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        i_link.transferAndCall(\\r\\n            registrar,\\r\\n            amount,\\r\\n            bytes.concat(registerSig, payload)\\r\\n        );\\r\\n        (state, , , , ) = i_registry.getState();\\r\\n        uint256 newNonce = state.nonce;\\r\\n        if (newNonce == oldNonce + 1) {\\r\\n            uint256 upkeepID = uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        blockhash(block.number - 1),\\r\\n                        address(i_registry),\\r\\n                        uint32(oldNonce)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n            // DEV - Use the upkeepID however you see fit\\r\\n            return upkeepID;\\r\\n        } else {\\r\\n            revert(\\\"auto-approve disabled\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1712d2ac002e57e74e5367f9a88c9466f935fada95bd9ad98111e434110f0b3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600b60006101000a81548160ff021916908360018111156200002d576200002c6200027d565b5b02179055506000600b60016101000a81548160ff021916908360028111156200005b576200005a6200027d565b5b02179055503480156200006d57600080fd5b5060405162004317380380620043178339818101604052810190620000939190620004e9565b60016000819055508773ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508660019080519060200190620000ea929190620001cd565b50856002908051906020019062000103929190620001cd565b5084600390805190602001906200011c929190620001cd565b50836006908051906020019062000135929190620001cd565b50826007819055504260a08181525050624f1a0082116200015757816200015c565b624f1a005b6008819055506200018060085460a051620001b560201b620024e81790919060201c565b600a8190555080600490805190602001906200019e929190620001cd565b50600060098190555050505050505050506200073e565b60008183620001c591906200067c565b905092915050565b828054620001db9062000708565b90600052602060002090601f016020900481019282620001ff57600085556200024b565b82601f106200021a57805160ff19168380011785556200024b565b828001600101855582156200024b579182015b828111156200024a5782518255916020019190600101906200022d565b5b5090506200025a91906200025e565b5090565b5b80821115620002795760008160009055506001016200025f565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ed82620002c0565b9050919050565b620002ff81620002e0565b81146200030b57600080fd5b50565b6000815190506200031f81620002f4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200037a826200032f565b810181811067ffffffffffffffff821117156200039c576200039b62000340565b5b80604052505050565b6000620003b1620002ac565b9050620003bf82826200036f565b919050565b600067ffffffffffffffff821115620003e257620003e162000340565b5b620003ed826200032f565b9050602081019050919050565b60005b838110156200041a578082015181840152602081019050620003fd565b838111156200042a576000848401525b50505050565b6000620004476200044184620003c4565b620003a5565b9050828152602081018484840111156200046657620004656200032a565b5b62000473848285620003fa565b509392505050565b600082601f83011262000493576200049262000325565b5b8151620004a584826020860162000430565b91505092915050565b6000819050919050565b620004c381620004ae565b8114620004cf57600080fd5b50565b600081519050620004e381620004b8565b92915050565b600080600080600080600080610100898b0312156200050d576200050c620002b6565b5b60006200051d8b828c016200030e565b985050602089015167ffffffffffffffff811115620005415762000540620002bb565b5b6200054f8b828c016200047b565b975050604089015167ffffffffffffffff811115620005735762000572620002bb565b5b620005818b828c016200047b565b965050606089015167ffffffffffffffff811115620005a557620005a4620002bb565b5b620005b38b828c016200047b565b955050608089015167ffffffffffffffff811115620005d757620005d6620002bb565b5b620005e58b828c016200047b565b94505060a0620005f88b828c01620004d2565b93505060c06200060b8b828c01620004d2565b92505060e089015167ffffffffffffffff8111156200062f576200062e620002bb565b5b6200063d8b828c016200047b565b9150509295985092959890939650565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200068982620004ae565b91506200069683620004ae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620006ce57620006cd6200064d565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200072157607f821691505b60208210811415620007385762000737620006d9565b5b50919050565b60805160601c60a051613b55620007c260003960008181611b4401526124b201526000818161082901528181610b680152818161154e0152818161167b015281816117f90152818161190401528181611a0701528181611ab801528181611bd601528181611dc701528181611f830152818161212101526123e40152613b556000f3fe6080604052600436106101db5760003560e01c80636235887a11610102578063b145603e11610095578063ce845d1d11610064578063ce845d1d146106ad578063e7cf1ab7146106d8578063f301af4214610701578063fa6ded3914610743576101eb565b8063b145603e14610601578063bf66e2c81461062c578063c5cd507814610657578063ce2a057214610682576101eb565b8063743857cb116100d1578063743857cb1461054557806395086ed11461057057806399a8502d146105ad5780639a913793146105d8576101eb565b80636235887a1461049c57806363bd1d4a146104d95780636e04ff0d146104f057806371aac7f91461052e576101eb565b80632636b9451161017a5780634d695bdb116101495780634d695bdb146103f45780634ef897191461041d5780635f7002661461044857806360fa9a7214610471576101eb565b80632636b9451461034a57806329dcb0cf146103755780634278ac8b146103a05780634585e33b146103cb576101eb565b80630fb5a6b4116101b65780630fb5a6b41461027a57806315a46ee6146102a55780631910bdc2146102d05780631c4b774b1461030d576101eb565b8062362a95146101f657806309917c50146102125780630c611f241461024f576101eb565b366101eb576101e93361076c565b005b6101f43361076c565b005b610210600480360381019061020b91906127de565b61076c565b005b34801561021e57600080fd5b50610239600480360381019061023491906127de565b610b3a565b6040516102469190612824565b60405180910390f35b34801561025b57600080fd5b50610264610b52565b6040516102719190612a94565b60405180910390f35b34801561028657600080fd5b5061028f610f4c565b60405161029c9190612824565b60405180910390f35b3480156102b157600080fd5b506102ba610f52565b6040516102c79190612b00565b60405180910390f35b3480156102dc57600080fd5b506102f760048036038101906102f291906127de565b610fe0565b6040516103049190612bd1565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190612c1f565b611077565b6040516103419190612dee565b60405180910390f35b34801561035657600080fd5b5061035f6113b4565b60405161036c9190612824565b60405180910390f35b34801561038157600080fd5b5061038a6113ba565b6040516103979190612824565b60405180910390f35b3480156103ac57600080fd5b506103b56113c0565b6040516103c29190612b00565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190612e75565b61144e565b005b34801561040057600080fd5b5061041b60048036038101906104169190612ff2565b61154c565b005b34801561042957600080fd5b506104326115eb565b60405161043f9190612b00565b60405180910390f35b34801561045457600080fd5b5061046f600480360381019061046a919061303b565b611679565b005b34801561047d57600080fd5b506104866118cb565b604051610493919061309d565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190612c1f565b6118de565b6040516104d09190612824565b60405180910390f35b3480156104e557600080fd5b506104ee611902565b005b3480156104fc57600080fd5b5061051760048036038101906105129190613159565b611afc565b604051610525929190613206565b60405180910390f35b34801561053a57600080fd5b50610543611bd4565b005b34801561055157600080fd5b5061055a611cf3565b604051610567919061327e565b60405180910390f35b34801561057c57600080fd5b5061059760048036038101906105929190613299565b611d06565b6040516105a49190612824565b60405180910390f35b3480156105b957600080fd5b506105c2611d37565b6040516105cf9190612b00565b60405180910390f35b3480156105e457600080fd5b506105ff60048036038101906105fa91906133e6565b611dc5565b005b34801561060d57600080fd5b50610616611f81565b604051610623919061352d565b60405180910390f35b34801561063857600080fd5b50610641611fa5565b60405161064e9190612bd1565b60405180910390f35b34801561066357600080fd5b5061066c611ffd565b6040516106799190612b00565b60405180910390f35b34801561068e57600080fd5b5061069761208b565b6040516106a49190612b00565b60405180910390f35b3480156106b957600080fd5b506106c2612119565b6040516106cf9190612824565b60405180910390f35b3480156106e457600080fd5b506106ff60048036038101906106fa9190612c1f565b61211f565b005b34801561070d57600080fd5b5061072860048036038101906107239190612c1f565b612289565b60405161073a96959493929190613548565b60405180910390f35b34801561074f57600080fd5b5061076a60048036038101906107659190612c1f565b6123e2565b005b600260005414156107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990613603565b60405180910390fd5b6002600081905550600060028111156107ce576107cd6128f6565b5b600b60019054906101000a900460ff1660028111156107f0576107ef6128f6565b5b14610827576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ad576040517f1e4a120d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108c2346009546124e890919063ffffffff16565b6009819055506000600d60003481526020019081526020016000206000015411801561090f5750600d600034815260200190815260200160002060060160009054906101000a900460ff16155b156109e25761093e6001600d6000348152602001908152602001600020600501546124fe90919063ffffffff16565b506000600d60003481526020019081526020016000206005015414156109e157600d600034815260200190815260200160002060008082016000905560018201600061098a9190612514565b60028201600061099a9190612514565b6003820160006109aa9190612554565b600482016000905560058201600090556006820160006101000a81549060ff02191690556007820160006109de9190612554565b50505b5b600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020349080600181540180825580915050600190039060005260206000200160009091909190915055610a9a34600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124e890919063ffffffff16565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fe76ad748537a48e778fef43dda4a6bd1b50cd62385f9f21a9ca267492355120834600954604051610b27929190613623565b60405180910390a2600160008190555050565b600f6020528060005260406000206000915090505481565b610b5a612575565b6040518061018001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200160018054610baf9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdb9061367b565b8015610c285780601f10610bfd57610100808354040283529160200191610c28565b820191906000526020600020905b815481529060010190602001808311610c0b57829003601f168201915b5050505050815260200160028054610c3f9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6b9061367b565b8015610cb85780601f10610c8d57610100808354040283529160200191610cb8565b820191906000526020600020905b815481529060010190602001808311610c9b57829003601f168201915b5050505050815260200160038054610ccf9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb9061367b565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050815260200160068054610d5f9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8b9061367b565b8015610dd85780601f10610dad57610100808354040283529160200191610dd8565b820191906000526020600020905b815481529060010190602001808311610dbb57829003601f168201915b50505050508152602001600754815260200160085481526020016009548152602001600b60019054906101000a900460ff166002811115610e1c57610e1b6128f6565b5b815260200160048054610e2e9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5a9061367b565b8015610ea75780601f10610e7c57610100808354040283529160200191610ea7565b820191906000526020600020905b815481529060010190602001808311610e8a57829003601f168201915b5050505050815260200160058054610ebe9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610eea9061367b565b8015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b50505050508152602001600a54815250905090565b60085481565b60058054610f5f9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8b9061367b565b8015610fd85780601f10610fad57610100808354040283529160200191610fd8565b820191906000526020600020905b815481529060010190602001808311610fbb57829003601f168201915b505050505081565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561106b57602002820191906000526020600020905b815481526020019060010190808311611057575b50505050509050919050565b61107f6125fe565b600d600083815260200190815260200160002060405180610100016040529081600082015481526020016001820180546110b89061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546110e49061367b565b80156111315780601f1061110657610100808354040283529160200191611131565b820191906000526020600020905b81548152906001019060200180831161111457829003601f168201915b5050505050815260200160028201805461114a9061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546111769061367b565b80156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561129d5783829060005260206000200180546112109061367b565b80601f016020809104026020016040519081016040528092919081815260200182805461123c9061367b565b80156112895780601f1061125e57610100808354040283529160200191611289565b820191906000526020600020905b81548152906001019060200180831161126c57829003601f168201915b5050505050815260200190600101906111f1565b50505050815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156113a55783829060005260206000200180546113189061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546113449061367b565b80156113915780601f1061136657610100808354040283529160200191611391565b820191906000526020600020905b81548152906001019060200180831161137457829003601f168201915b5050505050815260200190600101906112f9565b50505050815250509050919050565b60075481565b600a5481565b600380546113cd9061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546113f99061367b565b80156114465780601f1061141b57610100808354040283529160200191611446565b820191906000526020600020905b81548152906001019060200180831161142957829003601f168201915b505050505081565b600061146860405180602001604052806000815250611afc565b509050806114a2576040517fbc7a0a6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b60016101000a81548160ff021916908360028111156114c8576114c76128f6565b5b02179055507f5cf8cd2bd40f758a95257bed666285eb82801f1bf9223b8ec1481e510ba2e82d306040516114fc91906136bc565b60405180910390a160075460095410611547577f5369558c667e962b633128a01c31764d053da51f61d17370d327ed17f77deccc3060405161153e91906136bc565b60405180910390a15b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115d1576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600590805190602001906115e7929190612645565b5050565b600280546115f89061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546116249061367b565b80156116715780601f1061164657610100808354040283529160200191611671565b820191906000526020600020905b81548152906001019060200180831161165457829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116fe576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000839050600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b815260040161174391906136bc565b60206040518083038186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906136ec565b14156117d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cb90613765565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16634c7e9be36001856207a1207f0000000000000000000000000000000000000000000000000000000000000000671bc16d674ec800006040518663ffffffff1660e01b8152600401611841959493929190613963565b602060405180830381600087803b15801561185b57600080fd5b505af115801561186f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189391906136ec565b600c819055506001600b60006101000a81548160ff021916908360018111156118bf576118be6128f6565b5b02179055505050505050565b600b60019054906101000a900460ff1681565b601081815481106118ee57600080fd5b906000526020600020016000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611987576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600281111561199b5761199a6128f6565b5b600b60019054906101000a900460ff1660028111156119bd576119bc6128f6565b5b146119f4576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009549050600060098190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051611a4990613a28565b60006040518083038185875af1925050503d8060008114611a86576040519150601f19603f3d011682016040523d82523d6000602084013e611a8b565b606091505b505090508015611af3577fba5e837743d81ad0e6deb16089dbb65b549fdda8ad802fd8d4822884d70dc8b27f000000000000000000000000000000000000000000000000000000000000000030604051611ae6929190613a3d565b60405180910390a1611af8565b600080fd5b5050565b600060606000806002811115611b1557611b146128f6565b5b600b60019054906101000a900460ff166002811115611b3757611b366128f6565b5b1490506000600854611b727f0000000000000000000000000000000000000000000000000000000000000000426124fe90919063ffffffff16565b11905060008047119050818015611b865750825b8015611b8f5750805b9450846040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525094509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c59576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611c6d57611c6c6128f6565b5b600b60019054906101000a900460ff166002811115611c8f57611c8e6128f6565b5b1415611c9a57600080fd5b6002600b60016101000a81548160ff02191690836002811115611cc057611cbf6128f6565b5b02179055507fb83ebe09f40e9293bdea1d6567fae3175119d3d0ff13c4b4df15994837dd7f5160405160405180910390a1565b600b60009054906101000a900460ff1681565b600e6020528160005260406000208181548110611d2257600080fd5b90600052602060002001600091509150505481565b60018054611d449061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d709061367b565b8015611dbd5780601f10611d9257610100808354040283529160200191611dbd565b820191906000526020600020905b815481529060010190602001808311611da057829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e4a576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6010889080600181540180825580915050600190039060005260206000200160009091909190915055604051806101000160405280898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182815250600d60008a8152602001908152602001600020600082015181600001556020820151816001019080519060200190611ee8929190612645565b506040820151816002019080519060200190611f05929190612645565b506060820151816003019080519060200190611f229291906126cb565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e0820151816007019080519060200190611f739291906126cb565b509050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606010805480602002602001604051908101604052809291908181526020018280548015611ff357602002820191906000526020600020905b815481526020019060010190808311611fdf575b5050505050905090565b6006805461200a9061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546120369061367b565b80156120835780601f1061205857610100808354040283529160200191612083565b820191906000526020600020905b81548152906001019060200180831161206657829003601f168201915b505050505081565b600480546120989061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546120c49061367b565b80156121115780601f106120e657610100808354040283529160200191612111565b820191906000526020600020905b8154815290600101906020018083116120f457829003601f168201915b505050505081565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121a4576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156121b8576121b76128f6565b5b600b60009054906101000a900460ff1660018111156121da576121d96128f6565b5b146121e457600080fd5b6000600d600083815260200190815260200160002060000154111561228657600d600082815260200190815260200160002060008082016000905560018201600061222f9190612514565b60028201600061223f9190612514565b60038201600061224f9190612554565b600482016000905560058201600090556006820160006101000a81549060ff02191690556007820160006122839190612554565b50505b50565b600d6020528060005260406000206000915090508060000154908060010180546122b29061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546122de9061367b565b801561232b5780601f106123005761010080835404028352916020019161232b565b820191906000526020600020905b81548152906001019060200180831161230e57829003601f168201915b5050505050908060020180546123409061367b565b80601f016020809104026020016040519081016040528092919081815260200182805461236c9061367b565b80156123b95780601f1061238e576101008083540402835291602001916123b9565b820191906000526020600020905b81548152906001019060200180831161239c57829003601f168201915b5050505050908060040154908060050154908060060160009054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612467576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b624f1a00612480826008546124e890919063ffffffff16565b1161249f5761249a816008546124e890919063ffffffff16565b6124a4565b624f1a005b6008819055506124df6008547f00000000000000000000000000000000000000000000000000000000000000006124e890919063ffffffff16565b600a8190555050565b600081836124f69190613a95565b905092915050565b6000818361250c9190613aeb565b905092915050565b5080546125209061367b565b6000825580601f106125325750612551565b601f016020900490600052602060002090810190612550919061272b565b5b50565b50805460008255906000526020600020908101906125729190612748565b50565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600060028111156125e3576125e26128f6565b5b81526020016060815260200160608152602001600081525090565b604051806101000160405280600081526020016060815260200160608152602001606081526020016000815260200160008152602001600015158152602001606081525090565b8280546126519061367b565b90600052602060002090601f01602090048101928261267357600085556126ba565b82601f1061268c57805160ff19168380011785556126ba565b828001600101855582156126ba579182015b828111156126b957825182559160200191906001019061269e565b5b5090506126c7919061272b565b5090565b82805482825590600052602060002090810192821561271a579160200282015b82811115612719578251829080519060200190612709929190612645565b50916020019190600101906126eb565b5b5090506127279190612748565b5090565b5b8082111561274457600081600090555060010161272c565b5090565b5b80821115612768576000818161275f9190612514565b50600101612749565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127ab82612780565b9050919050565b6127bb816127a0565b81146127c657600080fd5b50565b6000813590506127d8816127b2565b92915050565b6000602082840312156127f4576127f3612776565b5b6000612802848285016127c9565b91505092915050565b6000819050919050565b61281e8161280b565b82525050565b60006020820190506128396000830184612815565b92915050565b612848816127a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561288857808201518184015260208101905061286d565b83811115612897576000848401525b50505050565b6000601f19601f8301169050919050565b60006128b98261284e565b6128c38185612859565b93506128d381856020860161286a565b6128dc8161289d565b840191505092915050565b6128f08161280b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612936576129356128f6565b5b50565b600081905061294782612925565b919050565b600061295782612939565b9050919050565b6129678161294c565b82525050565b600061018083016000830151612986600086018261283f565b506020830151848203602086015261299e82826128ae565b915050604083015184820360408601526129b882826128ae565b915050606083015184820360608601526129d282826128ae565b915050608083015184820360808601526129ec82826128ae565b91505060a0830151612a0160a08601826128e7565b5060c0830151612a1460c08601826128e7565b5060e0830151612a2760e08601826128e7565b50610100830151612a3c61010086018261295e565b50610120830151848203610120860152612a5682826128ae565b915050610140830151848203610140860152612a7282826128ae565b915050610160830151612a896101608601826128e7565b508091505092915050565b60006020820190508181036000830152612aae818461296d565b905092915050565b600082825260208201905092915050565b6000612ad28261284e565b612adc8185612ab6565b9350612aec81856020860161286a565b612af58161289d565b840191505092915050565b60006020820190508181036000830152612b1a8184612ac7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612b5a83836128e7565b60208301905092915050565b6000602082019050919050565b6000612b7e82612b22565b612b888185612b2d565b9350612b9383612b3e565b8060005b83811015612bc4578151612bab8882612b4e565b9750612bb683612b66565b925050600181019050612b97565b5085935050505092915050565b60006020820190508181036000830152612beb8184612b73565b905092915050565b612bfc8161280b565b8114612c0757600080fd5b50565b600081359050612c1981612bf3565b92915050565b600060208284031215612c3557612c34612776565b5b6000612c4384828501612c0a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612c8483836128ae565b905092915050565b6000602082019050919050565b6000612ca482612c4c565b612cae8185612c57565b935083602082028501612cc085612c68565b8060005b85811015612cfc5784840389528151612cdd8582612c78565b9450612ce883612c8c565b925060208a01995050600181019050612cc4565b50829750879550505050505092915050565b60008115159050919050565b612d2381612d0e565b82525050565b600061010083016000830151612d4260008601826128e7565b5060208301518482036020860152612d5a82826128ae565b91505060408301518482036040860152612d7482826128ae565b91505060608301518482036060860152612d8e8282612c99565b9150506080830151612da360808601826128e7565b5060a0830151612db660a08601826128e7565b5060c0830151612dc960c0860182612d1a565b5060e083015184820360e0860152612de18282612c99565b9150508091505092915050565b60006020820190508181036000830152612e088184612d29565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612e3557612e34612e10565b5b8235905067ffffffffffffffff811115612e5257612e51612e15565b5b602083019150836001820283011115612e6e57612e6d612e1a565b5b9250929050565b60008060208385031215612e8c57612e8b612776565b5b600083013567ffffffffffffffff811115612eaa57612ea961277b565b5b612eb685828601612e1f565b92509250509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612eff8261289d565b810181811067ffffffffffffffff82111715612f1e57612f1d612ec7565b5b80604052505050565b6000612f3161276c565b9050612f3d8282612ef6565b919050565b600067ffffffffffffffff821115612f5d57612f5c612ec7565b5b612f668261289d565b9050602081019050919050565b82818337600083830152505050565b6000612f95612f9084612f42565b612f27565b905082815260208101848484011115612fb157612fb0612ec2565b5b612fbc848285612f73565b509392505050565b600082601f830112612fd957612fd8612e10565b5b8135612fe9848260208601612f82565b91505092915050565b60006020828403121561300857613007612776565b5b600082013567ffffffffffffffff8111156130265761302561277b565b5b61303284828501612fc4565b91505092915050565b60008060006060848603121561305457613053612776565b5b6000613062868287016127c9565b9350506020613073868287016127c9565b9250506040613084868287016127c9565b9150509250925092565b6130978161294c565b82525050565b60006020820190506130b2600083018461308e565b92915050565b600067ffffffffffffffff8211156130d3576130d2612ec7565b5b6130dc8261289d565b9050602081019050919050565b60006130fc6130f7846130b8565b612f27565b90508281526020810184848401111561311857613117612ec2565b5b613123848285612f73565b509392505050565b600082601f8301126131405761313f612e10565b5b81356131508482602086016130e9565b91505092915050565b60006020828403121561316f5761316e612776565b5b600082013567ffffffffffffffff81111561318d5761318c61277b565b5b6131998482850161312b565b91505092915050565b6131ab81612d0e565b82525050565b600081519050919050565b600082825260208201905092915050565b60006131d8826131b1565b6131e281856131bc565b93506131f281856020860161286a565b6131fb8161289d565b840191505092915050565b600060408201905061321b60008301856131a2565b818103602083015261322d81846131cd565b90509392505050565b60028110613247576132466128f6565b5b50565b600081905061325882613236565b919050565b60006132688261324a565b9050919050565b6132788161325d565b82525050565b6000602082019050613293600083018461326f565b92915050565b600080604083850312156132b0576132af612776565b5b60006132be858286016127c9565b92505060206132cf85828601612c0a565b9150509250929050565b600067ffffffffffffffff8211156132f4576132f3612ec7565b5b602082029050602081019050919050565b6000613318613313846132d9565b612f27565b9050808382526020820190506020840283018581111561333b5761333a612e1a565b5b835b8181101561338257803567ffffffffffffffff8111156133605761335f612e10565b5b80860161336d8982612fc4565b8552602085019450505060208101905061333d565b5050509392505050565b600082601f8301126133a1576133a0612e10565b5b81356133b1848260208601613305565b91505092915050565b6133c381612d0e565b81146133ce57600080fd5b50565b6000813590506133e0816133ba565b92915050565b600080600080600080600080610100898b03121561340757613406612776565b5b60006134158b828c01612c0a565b985050602089013567ffffffffffffffff8111156134365761343561277b565b5b6134428b828c01612fc4565b975050604089013567ffffffffffffffff8111156134635761346261277b565b5b61346f8b828c01612fc4565b965050606089013567ffffffffffffffff8111156134905761348f61277b565b5b61349c8b828c0161338c565b95505060806134ad8b828c01612c0a565b94505060a06134be8b828c01612c0a565b93505060c06134cf8b828c016133d1565b92505060e089013567ffffffffffffffff8111156134f0576134ef61277b565b5b6134fc8b828c0161338c565b9150509295985092959890939650565b600061351782612780565b9050919050565b6135278161350c565b82525050565b6000602082019050613542600083018461351e565b92915050565b600060c08201905061355d6000830189612815565b818103602083015261356f8188612ac7565b905081810360408301526135838187612ac7565b90506135926060830186612815565b61359f6080830185612815565b6135ac60a08301846131a2565b979650505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006135ed601f83612ab6565b91506135f8826135b7565b602082019050919050565b6000602082019050818103600083015261361c816135e0565b9050919050565b60006040820190506136386000830185612815565b6136456020830184612815565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061369357607f821691505b602082108114156136a7576136a661364c565b5b50919050565b6136b6816127a0565b82525050565b60006020820190506136d160008301846136ad565b92915050565b6000815190506136e681612bf3565b92915050565b60006020828403121561370257613701612776565b5b6000613710848285016136d7565b91505092915050565b7f6e6f2066756e6473000000000000000000000000000000000000000000000000600082015250565b600061374f600883612ab6565b915061375a82613719565b602082019050919050565b6000602082019050818103600083015261377e81613742565b9050919050565b60008190508160005260206000209050919050565b600081546137a78161367b565b6137b18186612ab6565b945060018216600081146137cc57600181146137de57613811565b60ff1983168652602086019350613811565b6137e785613785565b60005b83811015613809578154818901526001820191506020810190506137ea565b808801955050505b50505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b60006138506002836131bc565b915061385b8261381a565b602082019050919050565b6000819050919050565b600063ffffffff82169050919050565b6000819050919050565b60006138a56138a061389b84613866565b613880565b613870565b9050919050565b6138b58161388a565b82525050565b60006138d66138d16138cc84612780565b613880565b612780565b9050919050565b60006138e8826138bb565b9050919050565b60006138fa826138dd565b9050919050565b61390a816138ef565b82525050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b600061394d61394861394384613910565b613880565b61391a565b9050919050565b61395d81613932565b82525050565b600061010082019050818103600083015261397e818861379a565b9050818103602083015261399181613843565b90506139a060408301876136ad565b6139ad60608301866138ac565b6139ba6080830185613901565b81810360a08301526139cb81613843565b905081810360c08301526139de81613843565b90506139ed60e0830184613954565b9695505050505050565b600081905092915050565b50565b6000613a126000836139f7565b9150613a1d82613a02565b600082019050919050565b6000613a3382613a05565b9150819050919050565b6000604082019050613a526000830185613901565b613a5f60208301846136ad565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613aa08261280b565b9150613aab8361280b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ae057613adf613a66565b5b828201905092915050565b6000613af68261280b565b9150613b018361280b565b925082821015613b1457613b13613a66565b5b82820390509291505056fea2646970667358221220c26c1c57a01804abc92fcc0ca9cb5211e335b5cc85493dbc4265b5391d92556664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101db5760003560e01c80636235887a11610102578063b145603e11610095578063ce845d1d11610064578063ce845d1d146106ad578063e7cf1ab7146106d8578063f301af4214610701578063fa6ded3914610743576101eb565b8063b145603e14610601578063bf66e2c81461062c578063c5cd507814610657578063ce2a057214610682576101eb565b8063743857cb116100d1578063743857cb1461054557806395086ed11461057057806399a8502d146105ad5780639a913793146105d8576101eb565b80636235887a1461049c57806363bd1d4a146104d95780636e04ff0d146104f057806371aac7f91461052e576101eb565b80632636b9451161017a5780634d695bdb116101495780634d695bdb146103f45780634ef897191461041d5780635f7002661461044857806360fa9a7214610471576101eb565b80632636b9451461034a57806329dcb0cf146103755780634278ac8b146103a05780634585e33b146103cb576101eb565b80630fb5a6b4116101b65780630fb5a6b41461027a57806315a46ee6146102a55780631910bdc2146102d05780631c4b774b1461030d576101eb565b8062362a95146101f657806309917c50146102125780630c611f241461024f576101eb565b366101eb576101e93361076c565b005b6101f43361076c565b005b610210600480360381019061020b91906127de565b61076c565b005b34801561021e57600080fd5b50610239600480360381019061023491906127de565b610b3a565b6040516102469190612824565b60405180910390f35b34801561025b57600080fd5b50610264610b52565b6040516102719190612a94565b60405180910390f35b34801561028657600080fd5b5061028f610f4c565b60405161029c9190612824565b60405180910390f35b3480156102b157600080fd5b506102ba610f52565b6040516102c79190612b00565b60405180910390f35b3480156102dc57600080fd5b506102f760048036038101906102f291906127de565b610fe0565b6040516103049190612bd1565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190612c1f565b611077565b6040516103419190612dee565b60405180910390f35b34801561035657600080fd5b5061035f6113b4565b60405161036c9190612824565b60405180910390f35b34801561038157600080fd5b5061038a6113ba565b6040516103979190612824565b60405180910390f35b3480156103ac57600080fd5b506103b56113c0565b6040516103c29190612b00565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190612e75565b61144e565b005b34801561040057600080fd5b5061041b60048036038101906104169190612ff2565b61154c565b005b34801561042957600080fd5b506104326115eb565b60405161043f9190612b00565b60405180910390f35b34801561045457600080fd5b5061046f600480360381019061046a919061303b565b611679565b005b34801561047d57600080fd5b506104866118cb565b604051610493919061309d565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190612c1f565b6118de565b6040516104d09190612824565b60405180910390f35b3480156104e557600080fd5b506104ee611902565b005b3480156104fc57600080fd5b5061051760048036038101906105129190613159565b611afc565b604051610525929190613206565b60405180910390f35b34801561053a57600080fd5b50610543611bd4565b005b34801561055157600080fd5b5061055a611cf3565b604051610567919061327e565b60405180910390f35b34801561057c57600080fd5b5061059760048036038101906105929190613299565b611d06565b6040516105a49190612824565b60405180910390f35b3480156105b957600080fd5b506105c2611d37565b6040516105cf9190612b00565b60405180910390f35b3480156105e457600080fd5b506105ff60048036038101906105fa91906133e6565b611dc5565b005b34801561060d57600080fd5b50610616611f81565b604051610623919061352d565b60405180910390f35b34801561063857600080fd5b50610641611fa5565b60405161064e9190612bd1565b60405180910390f35b34801561066357600080fd5b5061066c611ffd565b6040516106799190612b00565b60405180910390f35b34801561068e57600080fd5b5061069761208b565b6040516106a49190612b00565b60405180910390f35b3480156106b957600080fd5b506106c2612119565b6040516106cf9190612824565b60405180910390f35b3480156106e457600080fd5b506106ff60048036038101906106fa9190612c1f565b61211f565b005b34801561070d57600080fd5b5061072860048036038101906107239190612c1f565b612289565b60405161073a96959493929190613548565b60405180910390f35b34801561074f57600080fd5b5061076a60048036038101906107659190612c1f565b6123e2565b005b600260005414156107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990613603565b60405180910390fd5b6002600081905550600060028111156107ce576107cd6128f6565b5b600b60019054906101000a900460ff1660028111156107f0576107ef6128f6565b5b14610827576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ad576040517f1e4a120d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108c2346009546124e890919063ffffffff16565b6009819055506000600d60003481526020019081526020016000206000015411801561090f5750600d600034815260200190815260200160002060060160009054906101000a900460ff16155b156109e25761093e6001600d6000348152602001908152602001600020600501546124fe90919063ffffffff16565b506000600d60003481526020019081526020016000206005015414156109e157600d600034815260200190815260200160002060008082016000905560018201600061098a9190612514565b60028201600061099a9190612514565b6003820160006109aa9190612554565b600482016000905560058201600090556006820160006101000a81549060ff02191690556007820160006109de9190612554565b50505b5b600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020349080600181540180825580915050600190039060005260206000200160009091909190915055610a9a34600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124e890919063ffffffff16565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fe76ad748537a48e778fef43dda4a6bd1b50cd62385f9f21a9ca267492355120834600954604051610b27929190613623565b60405180910390a2600160008190555050565b600f6020528060005260406000206000915090505481565b610b5a612575565b6040518061018001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200160018054610baf9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bdb9061367b565b8015610c285780601f10610bfd57610100808354040283529160200191610c28565b820191906000526020600020905b815481529060010190602001808311610c0b57829003601f168201915b5050505050815260200160028054610c3f9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6b9061367b565b8015610cb85780601f10610c8d57610100808354040283529160200191610cb8565b820191906000526020600020905b815481529060010190602001808311610c9b57829003601f168201915b5050505050815260200160038054610ccf9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb9061367b565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b5050505050815260200160068054610d5f9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8b9061367b565b8015610dd85780601f10610dad57610100808354040283529160200191610dd8565b820191906000526020600020905b815481529060010190602001808311610dbb57829003601f168201915b50505050508152602001600754815260200160085481526020016009548152602001600b60019054906101000a900460ff166002811115610e1c57610e1b6128f6565b5b815260200160048054610e2e9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5a9061367b565b8015610ea75780601f10610e7c57610100808354040283529160200191610ea7565b820191906000526020600020905b815481529060010190602001808311610e8a57829003601f168201915b5050505050815260200160058054610ebe9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610eea9061367b565b8015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b50505050508152602001600a54815250905090565b60085481565b60058054610f5f9061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8b9061367b565b8015610fd85780601f10610fad57610100808354040283529160200191610fd8565b820191906000526020600020905b815481529060010190602001808311610fbb57829003601f168201915b505050505081565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561106b57602002820191906000526020600020905b815481526020019060010190808311611057575b50505050509050919050565b61107f6125fe565b600d600083815260200190815260200160002060405180610100016040529081600082015481526020016001820180546110b89061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546110e49061367b565b80156111315780601f1061110657610100808354040283529160200191611131565b820191906000526020600020905b81548152906001019060200180831161111457829003601f168201915b5050505050815260200160028201805461114a9061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546111769061367b565b80156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561129d5783829060005260206000200180546112109061367b565b80601f016020809104026020016040519081016040528092919081815260200182805461123c9061367b565b80156112895780601f1061125e57610100808354040283529160200191611289565b820191906000526020600020905b81548152906001019060200180831161126c57829003601f168201915b5050505050815260200190600101906111f1565b50505050815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156113a55783829060005260206000200180546113189061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546113449061367b565b80156113915780601f1061136657610100808354040283529160200191611391565b820191906000526020600020905b81548152906001019060200180831161137457829003601f168201915b5050505050815260200190600101906112f9565b50505050815250509050919050565b60075481565b600a5481565b600380546113cd9061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546113f99061367b565b80156114465780601f1061141b57610100808354040283529160200191611446565b820191906000526020600020905b81548152906001019060200180831161142957829003601f168201915b505050505081565b600061146860405180602001604052806000815250611afc565b509050806114a2576040517fbc7a0a6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b60016101000a81548160ff021916908360028111156114c8576114c76128f6565b5b02179055507f5cf8cd2bd40f758a95257bed666285eb82801f1bf9223b8ec1481e510ba2e82d306040516114fc91906136bc565b60405180910390a160075460095410611547577f5369558c667e962b633128a01c31764d053da51f61d17370d327ed17f77deccc3060405161153e91906136bc565b60405180910390a15b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115d1576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600590805190602001906115e7929190612645565b5050565b600280546115f89061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546116249061367b565b80156116715780601f1061164657610100808354040283529160200191611671565b820191906000526020600020905b81548152906001019060200180831161165457829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116fe576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000839050600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b815260040161174391906136bc565b60206040518083038186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906136ec565b14156117d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cb90613765565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16634c7e9be36001856207a1207f0000000000000000000000000000000000000000000000000000000000000000671bc16d674ec800006040518663ffffffff1660e01b8152600401611841959493929190613963565b602060405180830381600087803b15801561185b57600080fd5b505af115801561186f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189391906136ec565b600c819055506001600b60006101000a81548160ff021916908360018111156118bf576118be6128f6565b5b02179055505050505050565b600b60019054906101000a900460ff1681565b601081815481106118ee57600080fd5b906000526020600020016000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611987576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600281111561199b5761199a6128f6565b5b600b60019054906101000a900460ff1660028111156119bd576119bc6128f6565b5b146119f4576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009549050600060098190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051611a4990613a28565b60006040518083038185875af1925050503d8060008114611a86576040519150601f19603f3d011682016040523d82523d6000602084013e611a8b565b606091505b505090508015611af3577fba5e837743d81ad0e6deb16089dbb65b549fdda8ad802fd8d4822884d70dc8b27f000000000000000000000000000000000000000000000000000000000000000030604051611ae6929190613a3d565b60405180910390a1611af8565b600080fd5b5050565b600060606000806002811115611b1557611b146128f6565b5b600b60019054906101000a900460ff166002811115611b3757611b366128f6565b5b1490506000600854611b727f0000000000000000000000000000000000000000000000000000000000000000426124fe90919063ffffffff16565b11905060008047119050818015611b865750825b8015611b8f5750805b9450846040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525094509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c59576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611c6d57611c6c6128f6565b5b600b60019054906101000a900460ff166002811115611c8f57611c8e6128f6565b5b1415611c9a57600080fd5b6002600b60016101000a81548160ff02191690836002811115611cc057611cbf6128f6565b5b02179055507fb83ebe09f40e9293bdea1d6567fae3175119d3d0ff13c4b4df15994837dd7f5160405160405180910390a1565b600b60009054906101000a900460ff1681565b600e6020528160005260406000208181548110611d2257600080fd5b90600052602060002001600091509150505481565b60018054611d449061367b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d709061367b565b8015611dbd5780601f10611d9257610100808354040283529160200191611dbd565b820191906000526020600020905b815481529060010190602001808311611da057829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e4a576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6010889080600181540180825580915050600190039060005260206000200160009091909190915055604051806101000160405280898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182815250600d60008a8152602001908152602001600020600082015181600001556020820151816001019080519060200190611ee8929190612645565b506040820151816002019080519060200190611f05929190612645565b506060820151816003019080519060200190611f229291906126cb565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e0820151816007019080519060200190611f739291906126cb565b509050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606010805480602002602001604051908101604052809291908181526020018280548015611ff357602002820191906000526020600020905b815481526020019060010190808311611fdf575b5050505050905090565b6006805461200a9061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546120369061367b565b80156120835780601f1061205857610100808354040283529160200191612083565b820191906000526020600020905b81548152906001019060200180831161206657829003601f168201915b505050505081565b600480546120989061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546120c49061367b565b80156121115780601f106120e657610100808354040283529160200191612111565b820191906000526020600020905b8154815290600101906020018083116120f457829003601f168201915b505050505081565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121a4576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156121b8576121b76128f6565b5b600b60009054906101000a900460ff1660018111156121da576121d96128f6565b5b146121e457600080fd5b6000600d600083815260200190815260200160002060000154111561228657600d600082815260200190815260200160002060008082016000905560018201600061222f9190612514565b60028201600061223f9190612514565b60038201600061224f9190612554565b600482016000905560058201600090556006820160006101000a81549060ff02191690556007820160006122839190612554565b50505b50565b600d6020528060005260406000206000915090508060000154908060010180546122b29061367b565b80601f01602080910402602001604051908101604052809291908181526020018280546122de9061367b565b801561232b5780601f106123005761010080835404028352916020019161232b565b820191906000526020600020905b81548152906001019060200180831161230e57829003601f168201915b5050505050908060020180546123409061367b565b80601f016020809104026020016040519081016040528092919081815260200182805461236c9061367b565b80156123b95780601f1061238e576101008083540402835291602001916123b9565b820191906000526020600020905b81548152906001019060200180831161239c57829003601f168201915b5050505050908060040154908060050154908060060160009054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612467576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b624f1a00612480826008546124e890919063ffffffff16565b1161249f5761249a816008546124e890919063ffffffff16565b6124a4565b624f1a005b6008819055506124df6008547f00000000000000000000000000000000000000000000000000000000000000006124e890919063ffffffff16565b600a8190555050565b600081836124f69190613a95565b905092915050565b6000818361250c9190613aeb565b905092915050565b5080546125209061367b565b6000825580601f106125325750612551565b601f016020900490600052602060002090810190612550919061272b565b5b50565b50805460008255906000526020600020908101906125729190612748565b50565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600060028111156125e3576125e26128f6565b5b81526020016060815260200160608152602001600081525090565b604051806101000160405280600081526020016060815260200160608152602001606081526020016000815260200160008152602001600015158152602001606081525090565b8280546126519061367b565b90600052602060002090601f01602090048101928261267357600085556126ba565b82601f1061268c57805160ff19168380011785556126ba565b828001600101855582156126ba579182015b828111156126b957825182559160200191906001019061269e565b5b5090506126c7919061272b565b5090565b82805482825590600052602060002090810192821561271a579160200282015b82811115612719578251829080519060200190612709929190612645565b50916020019190600101906126eb565b5b5090506127279190612748565b5090565b5b8082111561274457600081600090555060010161272c565b5090565b5b80821115612768576000818161275f9190612514565b50600101612749565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127ab82612780565b9050919050565b6127bb816127a0565b81146127c657600080fd5b50565b6000813590506127d8816127b2565b92915050565b6000602082840312156127f4576127f3612776565b5b6000612802848285016127c9565b91505092915050565b6000819050919050565b61281e8161280b565b82525050565b60006020820190506128396000830184612815565b92915050565b612848816127a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561288857808201518184015260208101905061286d565b83811115612897576000848401525b50505050565b6000601f19601f8301169050919050565b60006128b98261284e565b6128c38185612859565b93506128d381856020860161286a565b6128dc8161289d565b840191505092915050565b6128f08161280b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612936576129356128f6565b5b50565b600081905061294782612925565b919050565b600061295782612939565b9050919050565b6129678161294c565b82525050565b600061018083016000830151612986600086018261283f565b506020830151848203602086015261299e82826128ae565b915050604083015184820360408601526129b882826128ae565b915050606083015184820360608601526129d282826128ae565b915050608083015184820360808601526129ec82826128ae565b91505060a0830151612a0160a08601826128e7565b5060c0830151612a1460c08601826128e7565b5060e0830151612a2760e08601826128e7565b50610100830151612a3c61010086018261295e565b50610120830151848203610120860152612a5682826128ae565b915050610140830151848203610140860152612a7282826128ae565b915050610160830151612a896101608601826128e7565b508091505092915050565b60006020820190508181036000830152612aae818461296d565b905092915050565b600082825260208201905092915050565b6000612ad28261284e565b612adc8185612ab6565b9350612aec81856020860161286a565b612af58161289d565b840191505092915050565b60006020820190508181036000830152612b1a8184612ac7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612b5a83836128e7565b60208301905092915050565b6000602082019050919050565b6000612b7e82612b22565b612b888185612b2d565b9350612b9383612b3e565b8060005b83811015612bc4578151612bab8882612b4e565b9750612bb683612b66565b925050600181019050612b97565b5085935050505092915050565b60006020820190508181036000830152612beb8184612b73565b905092915050565b612bfc8161280b565b8114612c0757600080fd5b50565b600081359050612c1981612bf3565b92915050565b600060208284031215612c3557612c34612776565b5b6000612c4384828501612c0a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612c8483836128ae565b905092915050565b6000602082019050919050565b6000612ca482612c4c565b612cae8185612c57565b935083602082028501612cc085612c68565b8060005b85811015612cfc5784840389528151612cdd8582612c78565b9450612ce883612c8c565b925060208a01995050600181019050612cc4565b50829750879550505050505092915050565b60008115159050919050565b612d2381612d0e565b82525050565b600061010083016000830151612d4260008601826128e7565b5060208301518482036020860152612d5a82826128ae565b91505060408301518482036040860152612d7482826128ae565b91505060608301518482036060860152612d8e8282612c99565b9150506080830151612da360808601826128e7565b5060a0830151612db660a08601826128e7565b5060c0830151612dc960c0860182612d1a565b5060e083015184820360e0860152612de18282612c99565b9150508091505092915050565b60006020820190508181036000830152612e088184612d29565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612e3557612e34612e10565b5b8235905067ffffffffffffffff811115612e5257612e51612e15565b5b602083019150836001820283011115612e6e57612e6d612e1a565b5b9250929050565b60008060208385031215612e8c57612e8b612776565b5b600083013567ffffffffffffffff811115612eaa57612ea961277b565b5b612eb685828601612e1f565b92509250509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612eff8261289d565b810181811067ffffffffffffffff82111715612f1e57612f1d612ec7565b5b80604052505050565b6000612f3161276c565b9050612f3d8282612ef6565b919050565b600067ffffffffffffffff821115612f5d57612f5c612ec7565b5b612f668261289d565b9050602081019050919050565b82818337600083830152505050565b6000612f95612f9084612f42565b612f27565b905082815260208101848484011115612fb157612fb0612ec2565b5b612fbc848285612f73565b509392505050565b600082601f830112612fd957612fd8612e10565b5b8135612fe9848260208601612f82565b91505092915050565b60006020828403121561300857613007612776565b5b600082013567ffffffffffffffff8111156130265761302561277b565b5b61303284828501612fc4565b91505092915050565b60008060006060848603121561305457613053612776565b5b6000613062868287016127c9565b9350506020613073868287016127c9565b9250506040613084868287016127c9565b9150509250925092565b6130978161294c565b82525050565b60006020820190506130b2600083018461308e565b92915050565b600067ffffffffffffffff8211156130d3576130d2612ec7565b5b6130dc8261289d565b9050602081019050919050565b60006130fc6130f7846130b8565b612f27565b90508281526020810184848401111561311857613117612ec2565b5b613123848285612f73565b509392505050565b600082601f8301126131405761313f612e10565b5b81356131508482602086016130e9565b91505092915050565b60006020828403121561316f5761316e612776565b5b600082013567ffffffffffffffff81111561318d5761318c61277b565b5b6131998482850161312b565b91505092915050565b6131ab81612d0e565b82525050565b600081519050919050565b600082825260208201905092915050565b60006131d8826131b1565b6131e281856131bc565b93506131f281856020860161286a565b6131fb8161289d565b840191505092915050565b600060408201905061321b60008301856131a2565b818103602083015261322d81846131cd565b90509392505050565b60028110613247576132466128f6565b5b50565b600081905061325882613236565b919050565b60006132688261324a565b9050919050565b6132788161325d565b82525050565b6000602082019050613293600083018461326f565b92915050565b600080604083850312156132b0576132af612776565b5b60006132be858286016127c9565b92505060206132cf85828601612c0a565b9150509250929050565b600067ffffffffffffffff8211156132f4576132f3612ec7565b5b602082029050602081019050919050565b6000613318613313846132d9565b612f27565b9050808382526020820190506020840283018581111561333b5761333a612e1a565b5b835b8181101561338257803567ffffffffffffffff8111156133605761335f612e10565b5b80860161336d8982612fc4565b8552602085019450505060208101905061333d565b5050509392505050565b600082601f8301126133a1576133a0612e10565b5b81356133b1848260208601613305565b91505092915050565b6133c381612d0e565b81146133ce57600080fd5b50565b6000813590506133e0816133ba565b92915050565b600080600080600080600080610100898b03121561340757613406612776565b5b60006134158b828c01612c0a565b985050602089013567ffffffffffffffff8111156134365761343561277b565b5b6134428b828c01612fc4565b975050604089013567ffffffffffffffff8111156134635761346261277b565b5b61346f8b828c01612fc4565b965050606089013567ffffffffffffffff8111156134905761348f61277b565b5b61349c8b828c0161338c565b95505060806134ad8b828c01612c0a565b94505060a06134be8b828c01612c0a565b93505060c06134cf8b828c016133d1565b92505060e089013567ffffffffffffffff8111156134f0576134ef61277b565b5b6134fc8b828c0161338c565b9150509295985092959890939650565b600061351782612780565b9050919050565b6135278161350c565b82525050565b6000602082019050613542600083018461351e565b92915050565b600060c08201905061355d6000830189612815565b818103602083015261356f8188612ac7565b905081810360408301526135838187612ac7565b90506135926060830186612815565b61359f6080830185612815565b6135ac60a08301846131a2565b979650505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006135ed601f83612ab6565b91506135f8826135b7565b602082019050919050565b6000602082019050818103600083015261361c816135e0565b9050919050565b60006040820190506136386000830185612815565b6136456020830184612815565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061369357607f821691505b602082108114156136a7576136a661364c565b5b50919050565b6136b6816127a0565b82525050565b60006020820190506136d160008301846136ad565b92915050565b6000815190506136e681612bf3565b92915050565b60006020828403121561370257613701612776565b5b6000613710848285016136d7565b91505092915050565b7f6e6f2066756e6473000000000000000000000000000000000000000000000000600082015250565b600061374f600883612ab6565b915061375a82613719565b602082019050919050565b6000602082019050818103600083015261377e81613742565b9050919050565b60008190508160005260206000209050919050565b600081546137a78161367b565b6137b18186612ab6565b945060018216600081146137cc57600181146137de57613811565b60ff1983168652602086019350613811565b6137e785613785565b60005b83811015613809578154818901526001820191506020810190506137ea565b808801955050505b50505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b60006138506002836131bc565b915061385b8261381a565b602082019050919050565b6000819050919050565b600063ffffffff82169050919050565b6000819050919050565b60006138a56138a061389b84613866565b613880565b613870565b9050919050565b6138b58161388a565b82525050565b60006138d66138d16138cc84612780565b613880565b612780565b9050919050565b60006138e8826138bb565b9050919050565b60006138fa826138dd565b9050919050565b61390a816138ef565b82525050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b600061394d61394861394384613910565b613880565b61391a565b9050919050565b61395d81613932565b82525050565b600061010082019050818103600083015261397e818861379a565b9050818103602083015261399181613843565b90506139a060408301876136ad565b6139ad60608301866138ac565b6139ba6080830185613901565b81810360a08301526139cb81613843565b905081810360c08301526139de81613843565b90506139ed60e0830184613954565b9695505050505050565b600081905092915050565b50565b6000613a126000836139f7565b9150613a1d82613a02565b600082019050919050565b6000613a3382613a05565b9150819050919050565b6000604082019050613a526000830185613901565b613a5f60208301846136ad565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613aa08261280b565b9150613aab8361280b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ae057613adf613a66565b5b828201905092915050565b6000613af68261280b565b9150613b018361280b565b925082821015613b1457613b13613a66565b5b82820390509291505056fea2646970667358221220c26c1c57a01804abc92fcc0ca9cb5211e335b5cc85493dbc4265b5391d92556664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "this is the function chainlink keepers calls chekupkeep returns true to trigger the action after the interval has passed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Cmp_NotCrtr()": [
        {
          "notice": "not in state "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 371,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 757,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_title",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 759,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_description",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 761,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_category",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 763,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_imageURI",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 765,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_campaignURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 767,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "s_tags",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 769,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "goalAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 771,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "duration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 773,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "currentBalance",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 780,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "deadline",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 785,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "c_mode",
        "offset": 0,
        "slot": "11",
        "type": "t_enum(C_Mode)753"
      },
      {
        "astId": 790,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "c_state",
        "offset": 1,
        "slot": "11",
        "type": "t_enum(C_State)750"
      },
      {
        "astId": 792,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "rId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 842,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(reward)837_storage)"
      },
      {
        "astId": 847,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "donations",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 851,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "aggrDonations",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 854,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "rKeys",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(C_Mode)753": {
        "encoding": "inplace",
        "label": "enum Campaign.C_Mode",
        "numberOfBytes": "1"
      },
      "t_enum(C_State)750": {
        "encoding": "inplace",
        "label": "enum Campaign.C_State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(reward)837_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Campaign.reward)",
        "numberOfBytes": "32",
        "value": "t_struct(reward)837_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(reward)837_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.reward",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 824,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 827,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "perks",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 829,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "delDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 831,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "quantity",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 833,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "infinite",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 836,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "shipsTo",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xE6176316bd66A28E44F9Cb653188382dd3f4e6B4",
  "abi": [
    {
      "inputs": [],
      "name": "Crf_CSA",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Crf_DonF",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Crf_NotCrtr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Crf_PubF",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Crf_RefF",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_tags",
          "type": "string"
        }
      ],
      "name": "CampaignAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        }
      ],
      "name": "CampaignFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "CampaignPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        }
      ],
      "name": "CampaignRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_val",
          "type": "uint256"
        }
      ],
      "name": "CampaignShrunk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_username",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_twitter",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_homeAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_pfp",
          "type": "string"
        }
      ],
      "name": "UserAdded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tags",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "addCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_twitter",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_homeAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pfp",
          "type": "string"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        }
      ],
      "name": "donateToCampaign",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upkeepCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        }
      ],
      "name": "publishCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        }
      ],
      "name": "refundFromCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        }
      ],
      "name": "removeCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xff94a89db8787631c0b0440934b8800c87b00fdb35d3e7f98b113926f98bd0f1",
  "receipt": {
    "to": null,
    "from": "0x1B1a51d1bbF42FEE2a93B230866344F50B271109",
    "contractAddress": "0xE6176316bd66A28E44F9Cb653188382dd3f4e6B4",
    "transactionIndex": 24,
    "gasUsed": "5254124",
    "logsBloom": "0x
    "blockHash": "0x85a39a8acc3ae37964af350e675bd0896dc27f816c2b206785207c682d96428c",
    "transactionHash": "0xff94a89db8787631c0b0440934b8800c87b00fdb35d3e7f98b113926f98bd0f1",
    "logs": [],
    "blockNumber": 3377286,
    "cumulativeGasUsed": "11989512",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "16960ec4db4c19e2615fd74dedbb90d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Crf_CSA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Crf_DonF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Crf_NotCrtr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Crf_PubF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Crf_RefF\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tags\",\"type\":\"string\"}],\"name\":\"CampaignAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"CampaignFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"CampaignPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"}],\"name\":\"CampaignRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"CampaignShrunk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_homeAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_pfp\",\"type\":\"string\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tags\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"addCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_homeAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pfp\",\"type\":\"string\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"}],\"name\":\"donateToCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upkeepCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"}],\"name\":\"publishCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"}],\"name\":\"refundFromCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"}],\"name\":\"removeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"Crf_DonF()\":[{\"notice\":\"cmp still active \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunder.sol\":\"CrowdFunder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice OnchainConfig of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct OnchainConfig {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint32 maxCheckDataSize;\\n  uint32 maxPerformDataSize;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member totalPremium the total premium collected on registry so far\\n * @member numUpkeeps total number of upkeeps on the registry\\n * @member configCount ordinal number of current config, out of all configs applied to this contract so far\\n * @member latestConfigBlockNumber last block at which this config was set\\n * @member latestConfigDigest domain-separation tag for current config\\n * @member latestEpoch for which a report was transmitted\\n * @member paused freeze on execution scoped to the entire registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint96 totalPremium;\\n  uint256 numUpkeeps;\\n  uint32 configCount;\\n  uint32 latestConfigBlockNumber;\\n  bytes32 latestConfigDigest;\\n  uint32 latestEpoch;\\n  bool paused;\\n}\\n\\n/**\\n * @notice all information about an upkeep\\n * @dev only used in return values\\n * @member target the contract which needs to be serviced\\n * @member executeGas the gas limit of upkeep execution\\n * @member checkData the checkData bytes for this upkeep\\n * @member balance the balance of this upkeep\\n * @member admin for this upkeep\\n * @member maxValidBlocknumber until which block this upkeep is valid\\n * @member lastPerformBlockNumber the last block number when this upkeep was performed\\n * @member amountSpent the amount this upkeep has spent\\n * @member paused if this upkeep has been paused\\n * @member skipSigVerification skip signature verification in transmit for a low security low cost model\\n */\\nstruct UpkeepInfo {\\n  address target;\\n  uint32 executeGas;\\n  bytes checkData;\\n  uint96 balance;\\n  address admin;\\n  uint64 maxValidBlocknumber;\\n  uint32 lastPerformBlockNumber;\\n  uint96 amountSpent;\\n  bool paused;\\n  bytes offchainConfig;\\n}\\n\\nenum UpkeepFailureReason {\\n  NONE,\\n  UPKEEP_CANCELLED,\\n  UPKEEP_PAUSED,\\n  TARGET_CHECK_REVERTED,\\n  UPKEEP_NOT_NEEDED,\\n  PERFORM_DATA_EXCEEDS_LIMIT,\\n  INSUFFICIENT_BALANCE\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData,\\n    bytes calldata offchainConfig\\n  ) external returns (uint256 id);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function pauseUpkeep(uint256 id) external;\\n\\n  function unpauseUpkeep(uint256 id) external;\\n\\n  function transferUpkeepAdmin(uint256 id, address proposed) external;\\n\\n  function acceptUpkeepAdmin(uint256 id) external;\\n\\n  function updateCheckData(uint256 id, bytes calldata newCheckData) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function setUpkeepOffchainConfig(uint256 id, bytes calldata config) external;\\n\\n  function getUpkeep(uint256 id) external view returns (UpkeepInfo memory upkeepInfo);\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getTransmitterInfo(address query)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      uint8 index,\\n      uint96 balance,\\n      uint96 lastCollected,\\n      address payee\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory state,\\n      OnchainConfig memory config,\\n      address[] memory signers,\\n      address[] memory transmitters,\\n      uint8 f\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    view\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\",\"keccak256\":\"0x9faf0551509440bd9c25a4a2f14b23bce2f82e5ab5691058b9664edab808468c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport { UpkeepIDConsumer } from \\\"./UpkeepIDConsumer.sol\\\";\\r\\nimport { LinkTokenInterface } from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\n// errors\\r\\nerror Cmp_NIS(); /**not in state */\\r\\nerror Cmp_NotCrtr();\\r\\nerror Cmp_DIC(); /**donator is creator */\\r\\nerror Cmp_NoDns();\\r\\nerror Cmp_RefF();\\r\\nerror Cmp_UpkNN();\\r\\nerror Cmp_NotRef();\\r\\nerror Cmp_Bankrupt();\\r\\n\\r\\ncontract Campaign is KeeperCompatibleInterface, ReentrancyGuard{\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // enums\\r\\n  enum C_State {\\r\\n    Fundraising,\\r\\n    Expired,\\r\\n    Canceled\\r\\n  }\\r\\n\\r\\n  enum C_Mode {\\r\\n    Draft,\\r\\n    Published\\r\\n  }\\r\\n\\r\\n  // c_state variables\\r\\n  address immutable private i_crf;\\r\\n  address payable immutable public i_creator;\\r\\n  string public s_title;\\r\\n  string public s_description;\\r\\n  string public s_category;\\r\\n  string public s_imageURI;\\r\\n  string public s_campaignURI;\\r\\n  string public s_tags;\\r\\n  uint256 public goalAmount;\\r\\n  uint256 public duration;\\r\\n  uint256 public currentBalance;\\r\\n  uint256 private immutable i_initTimeStamp;\\r\\n  uint256 private constant i_maxDur = 5184000;\\r\\n  uint256 public deadline;\\r\\n  C_Mode public c_mode = C_Mode.Draft;\\r\\n  C_State public c_state = C_State.Fundraising; // default c_state\\r\\n  uint256 private rId;\\r\\n\\r\\n  struct CampaignObject {\\r\\n    address i_creator;\\r\\n    string s_title;\\r\\n    string s_description;\\r\\n    string s_category;\\r\\n    string s_tags;\\r\\n    uint256 goalAmount;\\r\\n    uint256 duration;\\r\\n    uint256 currentBalance;\\r\\n    C_State currentC_State;\\r\\n    string s_imageURI;\\r\\n    string s_campaignURI;\\r\\n    uint256 deadline;\\r\\n  }\\r\\n\\r\\n  struct reward {\\r\\n    uint256 price;\\r\\n    string title;\\r\\n    string description;\\r\\n    string[] perks;\\r\\n    uint256 delDate;\\r\\n    uint256 quantity;\\r\\n    bool infinite;\\r\\n    string[] shipsTo;\\r\\n  }\\r\\n\\r\\n  mapping (uint256 => reward) public rewards;\\r\\n  mapping (address => uint256[]) public donations;\\r\\n  mapping (address => uint256) public aggrDonations;\\r\\n\\r\\n  uint256[] public rKeys;\\r\\n\\r\\n\\r\\n  // events\\r\\n  event FundingRecieved (\\r\\n    address indexed contributor,\\r\\n    uint256 amount,\\r\\n    uint256 currentBalance\\r\\n  );\\r\\n  event CreatorPaid(address creator, address campaignAddress);\\r\\n  event CampaignSuccessful(address campaignAddress);\\r\\n  event CampaignExpired(address campaignAddress);\\r\\n  event CampaignCanceled();\\r\\n\\r\\n\\r\\n  // modifiers\\r\\n  modifier isCreator() {\\r\\n    if(msg.sender != i_creator){revert Cmp_NotCrtr();}\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n  constructor (\\r\\n    address _crowdfunder,\\r\\n    address _creator,\\r\\n    string memory _title,\\r\\n    string memory _description,\\r\\n    string memory _category,\\r\\n    string memory _tags,\\r\\n    uint256 _goalAmount,\\r\\n    uint256 _duration,\\r\\n    string memory _imageURI\\r\\n  ) {\\r\\n    i_crf = _crowdfunder;\\r\\n    i_creator = payable(_creator);\\r\\n    s_title = _title;\\r\\n    s_description = _description;\\r\\n    s_category = _category;\\r\\n    s_tags = _tags;\\r\\n    goalAmount = _goalAmount;\\r\\n    i_initTimeStamp = block.timestamp;\\r\\n    duration = _duration > i_maxDur ? i_maxDur : _duration;\\r\\n    deadline = i_initTimeStamp.add(duration);\\r\\n    s_imageURI = _imageURI;\\r\\n    currentBalance = 0;\\r\\n  }\\r\\n\\r\\n  function timeBox(address _upkeepCreatorAddress, address _linkTokenAddress, address _campaignAddress) external isCreator {\\r\\n    UpkeepIDConsumer newUpkeepCreator = UpkeepIDConsumer(_upkeepCreatorAddress);\\r\\n    LinkTokenInterface token = LinkTokenInterface(_linkTokenAddress);\\r\\n    if(token.balanceOf(_upkeepCreatorAddress) == 0){revert(\\\"no funds\\\");}\\r\\n    rId = newUpkeepCreator.registerAndPredictID(s_title, \\\"0x\\\", _campaignAddress, 500000, i_creator, \\\"0x\\\", \\\"0x\\\", 2000000000000000000);\\r\\n    c_mode = C_Mode.Published;\\r\\n  }\\r\\n\\r\\n  function donate(address _donator) public payable nonReentrant{\\r\\n    if(msg.sender != i_crf){revert();}\\r\\n    if(c_state != C_State.Fundraising){revert Cmp_NIS();}\\r\\n    if(_donator == i_creator){revert Cmp_DIC();}\\r\\n    currentBalance = currentBalance.add(msg.value);\\r\\n    if(rewards[msg.value].price > 0 && !rewards[msg.value].infinite) //exists and is not infinite\\r\\n    {\\r\\n      rewards[msg.value].quantity.sub(1);\\r\\n      if(rewards[msg.value].quantity == 0){delete(rewards[msg.value]);}\\r\\n    }\\r\\n    donations[_donator].push(msg.value);\\r\\n    aggrDonations[_donator] = aggrDonations[_donator].add(msg.value);\\r\\n    emit FundingRecieved(_donator, msg.value, currentBalance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev this is the function chainlink keepers calls\\r\\n    chekupkeep returns true to trigger the action after the interval has passed\\r\\n   */\\r\\n  function checkUpkeep(bytes memory /**checkData */) public view override\\r\\n  returns (bool upkeepNeeded, bytes memory /**performData */) \\r\\n  {\\r\\n    bool isOpen = c_state == C_State.Fundraising;\\r\\n    bool timePassed = ((block.timestamp.sub(i_initTimeStamp)) > duration);\\r\\n    bool hasBalance = address(this).balance > 0;\\r\\n    upkeepNeeded = (timePassed && isOpen && hasBalance) ;\\r\\n    return (upkeepNeeded, \\\"0x0\\\");\\r\\n  }\\r\\n\\r\\n  function performUpkeep(bytes calldata /**performData */) external override {\\r\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n    if(!upkeepNeeded){revert Cmp_UpkNN();}\\r\\n    c_state = C_State.Expired;\\r\\n    emit CampaignExpired(address(this));\\r\\n    if(currentBalance >= goalAmount){\\r\\n      emit CampaignSuccessful(address(this));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function payout() external isCreator{\\r\\n    if(c_state != C_State.Expired){revert Cmp_NIS();}\\r\\n    uint256 totalRaised = currentBalance;\\r\\n    currentBalance = 0;\\r\\n    (bool success, ) = i_creator.call{value: totalRaised}(\\\"\\\");\\r\\n    if(success){\\r\\n      emit CreatorPaid(i_creator, address(this));\\r\\n    }\\r\\n    else{revert();}\\r\\n  }\\r\\n\\r\\n  function refund(address _donator) external nonReentrant{\\r\\n    if(msg.sender != i_crf){revert();}\\r\\n    if(c_state == C_State.Expired){revert Cmp_NIS();}\\r\\n    if(aggrDonations[_donator] == 0 ){revert Cmp_NoDns();}\\r\\n    uint256 amountToRefund = aggrDonations[_donator];\\r\\n    if(currentBalance < amountToRefund){revert Cmp_Bankrupt();}\\r\\n    currentBalance = currentBalance.sub(amountToRefund);\\r\\n    (bool success, ) = payable(_donator).call{value: amountToRefund}(\\\"\\\");\\r\\n    if(!success){revert Cmp_RefF();}\\r\\n    delete(donations[_donator]);\\r\\n    delete(aggrDonations[_donator]);\\r\\n  }\\r\\n\\r\\n  function makeReward( \\r\\n    uint256 _price, string memory _title, \\r\\n    string memory _description, string[] memory _perks, \\r\\n    uint256 _deadline, uint256 _quantity, bool _infinite, string[] memory _shipsTo\\r\\n    ) external isCreator {\\r\\n    rKeys.push(_price);\\r\\n    // shipsto _NW, infinite true, quantitymax 100  (for digRewards)  shipsto _AITW for phyRewards\\r\\n    rewards[_price] = reward(_price, _title, _description, _perks, _deadline, _quantity, _infinite, _shipsTo);\\r\\n  }\\r\\n\\r\\n  function deleteReward(uint256 _priceID) external isCreator {\\r\\n    if(c_mode != C_Mode.Draft){revert();}\\r\\n    if(rewards[_priceID].price > 0){delete(rewards[_priceID]);}\\r\\n  }\\r\\n\\r\\n  function endCampaign() external isCreator {\\r\\n    if(c_state == C_State.Expired){revert();}\\r\\n    c_state = C_State.Canceled;\\r\\n    emit CampaignCanceled();\\r\\n  }\\r\\n\\r\\n  // update functions\\r\\n  function updateCampaignURI(string memory _campaignURI) external isCreator {\\r\\n    s_campaignURI = _campaignURI;\\r\\n  }\\r\\n\\r\\n  function updateDur(uint256 _addedDur) external isCreator {\\r\\n    duration = ((duration.add(_addedDur)) > i_maxDur) ? i_maxDur : duration.add(_addedDur);\\r\\n    deadline = i_initTimeStamp.add(duration);\\r\\n  }\\r\\n\\r\\n  // getter functions\\r\\n  function getDonations(address _donator) external view returns(uint256[] memory) {\\r\\n    return donations[_donator];\\r\\n  }\\r\\n\\r\\n  function getRewardKeys() external view returns(uint256[] memory){\\r\\n    return rKeys;\\r\\n  }\\r\\n  \\r\\n  function getReward(uint256 _priceID) external view returns (reward memory) {\\r\\n    return rewards[_priceID];\\r\\n  }\\r\\n\\r\\n  function getCampaignDetails() external view returns(CampaignObject memory) {\\r\\n    return CampaignObject(\\r\\n      i_creator,\\r\\n      s_title,\\r\\n      s_description,\\r\\n      s_category,\\r\\n      s_tags,\\r\\n      goalAmount,\\r\\n      duration,\\r\\n      currentBalance,\\r\\n      c_state,\\r\\n      s_imageURI,\\r\\n      s_campaignURI,\\r\\n      deadline\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // fallback functions\\r\\n  fallback() external payable {}\\r\\n  receive() external payable {}\\r\\n}\",\"keccak256\":\"0x7ec28148364c11984645434436d8087d7a8a8df2419f20ead1dec5a5ee359da2\",\"license\":\"MIT\"},\"contracts/CrowdFunder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./Campaign.sol\\\";\\r\\n\\r\\n// errors\\r\\nerror Crf_NotCrtr();\\r\\nerror Crf_CSA(); /** cmp still active */\\r\\nerror Crf_DonF();\\r\\nerror Crf_RefF();\\r\\nerror Crf_PubF();\\r\\n\\r\\ncontract CrowdFunder {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  event UserAdded(\\r\\n    address indexed _address,\\r\\n    string _username,\\r\\n    string _twitter,\\r\\n    string _email,\\r\\n    string _homeAddress,\\r\\n    string _pfp\\r\\n  );\\r\\n\\r\\n  event CampaignAdded(\\r\\n    address indexed _campaignAddress,\\r\\n    address indexed _creator,\\r\\n    string _title,\\r\\n    string _description,\\r\\n    string _category,\\r\\n    string _tags\\r\\n  );\\r\\n\\r\\n  event CampaignFunded(\\r\\n    address indexed _funder,\\r\\n    address indexed _campaignAddress,\\r\\n    uint256 _val\\r\\n  );\\r\\n\\r\\n  event CampaignShrunk(\\r\\n    address indexed _withdrawer,\\r\\n    address indexed _campaignAddress,\\r\\n    uint256 _val\\r\\n  );\\r\\n\\r\\n  event CampaignRemoved(\\r\\n    address indexed _campaignAddress\\r\\n  );\\r\\n\\r\\n  event CampaignPublished(\\r\\n    address _campaignAddress,\\r\\n    address _creator\\r\\n  );\\r\\n\\r\\n  uint256 public campaignCounter;\\r\\n  mapping (address => Campaign) private campaigns;\\r\\n\\r\\n  function addUser(\\r\\n    address _address, string memory _username, \\r\\n    string memory _twitter, string memory _email, \\r\\n    string memory _homeAddress,\\r\\n    string memory _pfp\\r\\n    ) external {\\r\\n    emit UserAdded(_address, _username, _twitter, _email, _homeAddress, _pfp);\\r\\n  }\\r\\n\\r\\n  function addCampaign (\\r\\n    string memory _title, \\r\\n    string memory _description,\\r\\n    string memory _category,\\r\\n    string memory _tags, \\r\\n    uint256 _goalAmount,\\r\\n    uint256 _duration,\\r\\n    string memory _imageURI\\r\\n    ) external {\\r\\n    Campaign newCampaign = new Campaign(\\r\\n      address(this),\\r\\n      payable(msg.sender), _title, \\r\\n      _description, _category, \\r\\n      _tags, _goalAmount, \\r\\n      _duration, _imageURI\\r\\n    );\\r\\n    campaigns[address(newCampaign)] = newCampaign;\\r\\n    emit CampaignAdded(address(newCampaign), msg.sender, _title, _description, _category, _tags);\\r\\n  }\\r\\n\\r\\n  function donateToCampaign(address _campaignAddress) external payable {\\r\\n    (bool success, ) = _campaignAddress.call{value:msg.value}(abi.encodeWithSignature(\\\"donate(address)\\\",msg.sender));\\r\\n    if(success){\\r\\n      emit CampaignFunded(msg.sender, _campaignAddress, msg.value);\\r\\n    }else{\\r\\n      revert Crf_DonF();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function refundFromCampaign(address _campaignAddress) external {\\r\\n    uint256 refVal = campaigns[_campaignAddress].aggrDonations(msg.sender);\\r\\n    if(!(refVal > 0)){revert();}\\r\\n    (bool success,) = _campaignAddress.call(abi.encodeWithSignature(\\\"refund(address)\\\", msg.sender));\\r\\n    // campaigns[_campaignAddress].refund(msg.sender);\\r\\n    // emit CampaignShrunk(msg.sender, _campaignAddress, refVal);\\r\\n    if(success){\\r\\n      emit CampaignShrunk(msg.sender, _campaignAddress, refVal);\\r\\n    }else{\\r\\n      revert Crf_RefF();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removeCampaign (address _campaignAddress) external {\\r\\n    if(campaigns[_campaignAddress].i_creator() != msg.sender){revert Crf_NotCrtr();}\\r\\n    if(campaigns[_campaignAddress].currentBalance() > 0){revert Crf_CSA();}\\r\\n    // either payout or leave for refunds\\r\\n    delete(campaigns[_campaignAddress]);\\r\\n    emit CampaignRemoved(_campaignAddress);\\r\\n  }\\r\\n\\r\\n  function publishCampaign(address _campaignAddress, address _upkeepCreator, address _linkToken) external {\\r\\n    (bool success, ) = _campaignAddress.delegatecall(abi.encodeWithSignature(\\\"timeBox(address,address,address)\\\", _upkeepCreator, _linkToken, _campaignAddress));\\r\\n    if(success){\\r\\n      campaignCounter = campaignCounter.add(1);\\r\\n      emit CampaignPublished(_campaignAddress, msg.sender);\\r\\n    }else{revert Crf_PubF();}\\r\\n  }\\r\\n\\r\\n  fallback() external payable{}\\r\\n  receive() external payable{}\\r\\n}\",\"keccak256\":\"0x6ae78101cddf581b4a4c7abca2357c2d82567c55c89eb03b79032098eb48a7a7\",\"license\":\"MIT\"},\"contracts/UpkeepIDConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n// UpkeepIDConsumerExample.sol imports functions from both ./AutomationRegistryInterface2_0.sol and\\r\\n// ./interfaces/LinkTokenInterface.sol\\r\\n\\r\\nimport {AutomationRegistryInterface, State, OnchainConfig} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\r\\n * DO NOT USE THIS CODE IN PRODUCTION.\\r\\n */\\r\\n\\r\\ninterface KeeperRegistrarInterface {\\r\\n    function register(\\r\\n        string memory name,\\r\\n        bytes calldata encryptedEmail,\\r\\n        address upkeepContract,\\r\\n        uint32 gasLimit,\\r\\n        address adminAddress,\\r\\n        bytes calldata checkData,\\r\\n        bytes calldata offchainConfig,\\r\\n        uint96 amount,\\r\\n        address sender\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract UpkeepIDConsumer {\\r\\n    LinkTokenInterface public immutable i_link;\\r\\n    address public immutable registrar;\\r\\n    AutomationRegistryInterface public immutable i_registry;\\r\\n    bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\r\\n\\r\\n    constructor(\\r\\n        LinkTokenInterface _link,\\r\\n        address _registrar,\\r\\n        AutomationRegistryInterface _registry\\r\\n    ) {\\r\\n        i_link = _link;\\r\\n        registrar = _registrar;\\r\\n        i_registry = _registry;\\r\\n    }\\r\\n\\r\\n    function registerAndPredictID(\\r\\n        string memory name,\\r\\n        bytes calldata encryptedEmail,\\r\\n        address upkeepContract,\\r\\n        uint32 gasLimit,\\r\\n        address adminAddress,\\r\\n        bytes calldata checkData,\\r\\n        bytes calldata offchainConfig,\\r\\n        uint96 amount\\r\\n    ) public returns(uint256) {\\r\\n        (State memory state, , , , ) = i_registry.getState();\\r\\n        uint256 oldNonce = state.nonce;\\r\\n        bytes memory payload = abi.encode(\\r\\n            name,\\r\\n            encryptedEmail,\\r\\n            upkeepContract,\\r\\n            gasLimit,\\r\\n            adminAddress,\\r\\n            checkData,\\r\\n            offchainConfig,\\r\\n            amount,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        i_link.transferAndCall(\\r\\n            registrar,\\r\\n            amount,\\r\\n            bytes.concat(registerSig, payload)\\r\\n        );\\r\\n        (state, , , , ) = i_registry.getState();\\r\\n        uint256 newNonce = state.nonce;\\r\\n        if (newNonce == oldNonce + 1) {\\r\\n            uint256 upkeepID = uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        blockhash(block.number - 1),\\r\\n                        address(i_registry),\\r\\n                        uint32(oldNonce)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n            // DEV - Use the upkeepID however you see fit\\r\\n            return upkeepID;\\r\\n        } else {\\r\\n            revert(\\\"auto-approve disabled\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1712d2ac002e57e74e5367f9a88c9466f935fada95bd9ad98111e434110f0b3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e87806100206000396000f3fe6080604052600436106200007f5760003560e01c8063bbfade3e1162000055578063bbfade3e1462000105578063e4663a5b1462000133578063fab62a1d1462000161578063fca604d7146200018f5762000087565b80631a702aa014620000895780637c6abc8214620000b7578063ac3d15fb14620000d75762000087565b366200008757005b005b3480156200009657600080fd5b50620000b56004803603810190620000af919062000e67565b620001bf565b005b620000d56004803603810190620000cf919062000f9e565b6200021f565b005b348015620000e457600080fd5b50620001036004803603810190620000fd919062000f9e565b620003c9565b005b3480156200011257600080fd5b506200013160048036038101906200012b91906200100b565b62000674565b005b3480156200014057600080fd5b506200015f600480360381019062000159919062000f9e565b620007b6565b005b3480156200016e57600080fd5b506200018d600480360381019062000187919062001159565b62000ac0565b005b3480156200019c57600080fd5b50620001a762000c60565b604051620001b69190620011c6565b60405180910390f35b8573ffffffffffffffffffffffffffffffffffffffff167f8a71481c426e212d085148853642cbd73769f57ca8e2a96eca998197465ab41686868686866040516200020f95949392919062001276565b60405180910390a2505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1634336040516024016200024c919062001307565b6040516020818303038152906040527e362a95000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051620002d7919062001371565b60006040518083038185875af1925050503d806000811462000316576040519150601f19603f3d011682016040523d82523d6000602084013e6200031b565b606091505b50509050801562000393578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f31dfdd0cdbba4daad7dbdc3bee4f31a7843784462febd6b9a72a11b282c41ef934604051620003859190620011c6565b60405180910390a3620003c5565b6040517f6bfd065c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309917c50336040518263ffffffff1660e01b815260040162000465919062001307565b60206040518083038186803b1580156200047e57600080fd5b505afa15801562000493573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b99190620013a1565b905060008111620004c957600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1633604051602401620004f5919062001307565b6040516020818303038152906040527ffa89401a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000581919062001371565b6000604051808303816000865af19150503d8060008114620005c0576040519150601f19603f3d011682016040523d82523d6000602084013e620005c5565b606091505b5050905080156200063d578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8cb455cec59b17d4c723945fe8127937707037e0bb6da7ed63742fcb9f6babe3846040516200062f9190620011c6565b60405180910390a36200066f565b6040517fda3e747c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60003033898989898989896040516200068d9062000c7e565b620006a1999897969594939291906200143e565b604051809103906000f080158015620006be573d6000803e3d6000fd5b50905080600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f54aab6ebc201e42488e3fdefdd10c9b99816e9dc15e8a77f1fba0bd435a414578a8a8a8a604051620007a4949392919062001500565b60405180910390a35050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b145603e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200087357600080fd5b505afa15801562000888573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008ae9190620015ae565b73ffffffffffffffffffffffffffffffffffffffff1614620008fc576040517f06256c5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce845d1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009a457600080fd5b505afa158015620009b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009df9190620013a1565b111562000a18576040517fb2032d6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558073ffffffffffffffffffffffffffffffffffffffff167fd41d62ed7a46b1f2f4c0a4c0fa40c95bbe14a7d55034ff9817b743d6cb79353660405160405180910390a250565b60008373ffffffffffffffffffffffffffffffffffffffff1683838660405160240162000af093929190620015e0565b6040516020818303038152906040527f5f700266000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000b7c919062001371565b600060405180830381855af49150503d806000811462000bb9576040519150601f19603f3d011682016040523d82523d6000602084013e62000bbe565b606091505b50509050801562000c285762000be1600160005462000c6690919063ffffffff16565b6000819055507f4ee76a1c89ccbef26f098ac48c95b7da87fe34749fea8758a71a3dc4ccc28bcd843360405162000c1a9291906200161d565b60405180910390a162000c5a565b6040517f7f42f20d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60005481565b6000818362000c76919062001679565b905092915050565b61477b80620016d783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ccd8262000ca0565b9050919050565b62000cdf8162000cc0565b811462000ceb57600080fd5b50565b60008135905062000cff8162000cd4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000d5a8262000d0f565b810181811067ffffffffffffffff8211171562000d7c5762000d7b62000d20565b5b80604052505050565b600062000d9162000c8c565b905062000d9f828262000d4f565b919050565b600067ffffffffffffffff82111562000dc25762000dc162000d20565b5b62000dcd8262000d0f565b9050602081019050919050565b82818337600083830152505050565b600062000e0062000dfa8462000da4565b62000d85565b90508281526020810184848401111562000e1f5762000e1e62000d0a565b5b62000e2c84828562000dda565b509392505050565b600082601f83011262000e4c5762000e4b62000d05565b5b813562000e5e84826020860162000de9565b91505092915050565b60008060008060008060c0878903121562000e875762000e8662000c96565b5b600062000e9789828a0162000cee565b965050602087013567ffffffffffffffff81111562000ebb5762000eba62000c9b565b5b62000ec989828a0162000e34565b955050604087013567ffffffffffffffff81111562000eed5762000eec62000c9b565b5b62000efb89828a0162000e34565b945050606087013567ffffffffffffffff81111562000f1f5762000f1e62000c9b565b5b62000f2d89828a0162000e34565b935050608087013567ffffffffffffffff81111562000f515762000f5062000c9b565b5b62000f5f89828a0162000e34565b92505060a087013567ffffffffffffffff81111562000f835762000f8262000c9b565b5b62000f9189828a0162000e34565b9150509295509295509295565b60006020828403121562000fb75762000fb662000c96565b5b600062000fc78482850162000cee565b91505092915050565b6000819050919050565b62000fe58162000fd0565b811462000ff157600080fd5b50565b600081359050620010058162000fda565b92915050565b600080600080600080600060e0888a0312156200102d576200102c62000c96565b5b600088013567ffffffffffffffff8111156200104e576200104d62000c9b565b5b6200105c8a828b0162000e34565b975050602088013567ffffffffffffffff81111562001080576200107f62000c9b565b5b6200108e8a828b0162000e34565b965050604088013567ffffffffffffffff811115620010b257620010b162000c9b565b5b620010c08a828b0162000e34565b955050606088013567ffffffffffffffff811115620010e457620010e362000c9b565b5b620010f28a828b0162000e34565b9450506080620011058a828b0162000ff4565b93505060a0620011188a828b0162000ff4565b92505060c088013567ffffffffffffffff8111156200113c576200113b62000c9b565b5b6200114a8a828b0162000e34565b91505092959891949750929550565b60008060006060848603121562001175576200117462000c96565b5b6000620011858682870162000cee565b9350506020620011988682870162000cee565b9250506040620011ab8682870162000cee565b9150509250925092565b620011c08162000fd0565b82525050565b6000602082019050620011dd6000830184620011b5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200121f57808201518184015260208101905062001202565b838111156200122f576000848401525b50505050565b60006200124282620011e3565b6200124e8185620011ee565b935062001260818560208601620011ff565b6200126b8162000d0f565b840191505092915050565b600060a082019050818103600083015262001292818862001235565b90508181036020830152620012a8818762001235565b90508181036040830152620012be818662001235565b90508181036060830152620012d4818562001235565b90508181036080830152620012ea818462001235565b90509695505050505050565b620013018162000cc0565b82525050565b60006020820190506200131e6000830184620012f6565b92915050565b600081519050919050565b600081905092915050565b6000620013478262001324565b6200135381856200132f565b935062001365818560208601620011ff565b80840191505092915050565b60006200137f82846200133a565b915081905092915050565b6000815190506200139b8162000fda565b92915050565b600060208284031215620013ba57620013b962000c96565b5b6000620013ca848285016200138a565b91505092915050565b6000819050919050565b6000620013fe620013f8620013f28462000ca0565b620013d3565b62000ca0565b9050919050565b60006200141282620013dd565b9050919050565b6000620014268262001405565b9050919050565b620014388162001419565b82525050565b60006101208201905062001456600083018c620012f6565b62001465602083018b6200142d565b818103604083015262001479818a62001235565b905081810360608301526200148f818962001235565b90508181036080830152620014a5818862001235565b905081810360a0830152620014bb818762001235565b9050620014cc60c0830186620011b5565b620014db60e0830185620011b5565b818103610100830152620014f0818462001235565b90509a9950505050505050505050565b600060808201905081810360008301526200151c818762001235565b9050818103602083015262001532818662001235565b9050818103604083015262001548818562001235565b905081810360608301526200155e818462001235565b905095945050505050565b6000620015768262000ca0565b9050919050565b620015888162001569565b81146200159457600080fd5b50565b600081519050620015a8816200157d565b92915050565b600060208284031215620015c757620015c662000c96565b5b6000620015d78482850162001597565b91505092915050565b6000606082019050620015f76000830186620012f6565b620016066020830185620012f6565b620016156040830184620012f6565b949350505050565b6000604082019050620016346000830185620012f6565b620016436020830184620012f6565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620016868262000fd0565b9150620016938362000fd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620016cb57620016ca6200164a565b5b82820190509291505056fe60e06040526000600b60006101000a81548160ff021916908360018111156200002d576200002c620002b5565b5b02179055506000600b60016101000a81548160ff021916908360028111156200005b576200005a620002b5565b5b02179055503480156200006d57600080fd5b506040516200477b3803806200477b833981810160405281019062000093919062000521565b60016000819055508873ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508773ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505086600190805190602001906200012192919062000205565b5085600290805190602001906200013a92919062000205565b5084600390805190602001906200015392919062000205565b5083600690805190602001906200016c92919062000205565b50826007819055504260c08181525050624f1a0082116200018e578162000193565b624f1a005b600881905550620001b760085460c051620001ed60201b620028c91790919060201c565b600a819055508060049080519060200190620001d592919062000205565b5060006009819055505050505050505050506200078c565b60008183620001fd9190620006ca565b905092915050565b828054620002139062000756565b90600052602060002090601f01602090048101928262000237576000855562000283565b82601f106200025257805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028257825182559160200191906001019062000265565b5b50905062000292919062000296565b5090565b5b80821115620002b157600081600090555060010162000297565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032582620002f8565b9050919050565b620003378162000318565b81146200034357600080fd5b50565b60008151905062000357816200032c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003b28262000367565b810181811067ffffffffffffffff82111715620003d457620003d362000378565b5b80604052505050565b6000620003e9620002e4565b9050620003f78282620003a7565b919050565b600067ffffffffffffffff8211156200041a576200041962000378565b5b620004258262000367565b9050602081019050919050565b60005b838110156200045257808201518184015260208101905062000435565b8381111562000462576000848401525b50505050565b60006200047f6200047984620003fc565b620003dd565b9050828152602081018484840111156200049e576200049d62000362565b5b620004ab84828562000432565b509392505050565b600082601f830112620004cb57620004ca6200035d565b5b8151620004dd84826020860162000468565b91505092915050565b6000819050919050565b620004fb81620004e6565b81146200050757600080fd5b50565b6000815190506200051b81620004f0565b92915050565b60008060008060008060008060006101208a8c031215620005475762000546620002ee565b5b6000620005578c828d0162000346565b99505060206200056a8c828d0162000346565b98505060408a015167ffffffffffffffff8111156200058e576200058d620002f3565b5b6200059c8c828d01620004b3565b97505060608a015167ffffffffffffffff811115620005c057620005bf620002f3565b5b620005ce8c828d01620004b3565b96505060808a015167ffffffffffffffff811115620005f257620005f1620002f3565b5b620006008c828d01620004b3565b95505060a08a015167ffffffffffffffff811115620006245762000623620002f3565b5b620006328c828d01620004b3565b94505060c0620006458c828d016200050a565b93505060e0620006588c828d016200050a565b9250506101008a015167ffffffffffffffff8111156200067d576200067c620002f3565b5b6200068b8c828d01620004b3565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006d782620004e6565b9150620006e483620004e6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200071c576200071b6200069b565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200076f57607f821691505b6020821081141562000786576200078562000727565b5b50919050565b60805160601c60a05160601c60c051613f576200082460003960008181611bbe015261252c0152600081816108a301528181610be2015281816115c8015281816116f5015281816118730152818161197e01528181611a8101528181611b3201528181611c5001528181611e4101528181611ffd0152818161219b015261245e0152600081816107de01526125b20152613f576000f3fe6080604052600436106101e65760003560e01c806363bd1d4a11610102578063bf66e2c811610095578063e7cf1ab711610064578063e7cf1ab7146106d1578063f301af42146106fa578063fa6ded391461073c578063fa89401a14610765576101ed565b8063bf66e2c814610625578063c5cd507814610650578063ce2a05721461067b578063ce845d1d146106a6576101ed565b806395086ed1116100d157806395086ed11461056957806399a8502d146105a65780639a913793146105d1578063b145603e146105fa576101ed565b806363bd1d4a146104d25780636e04ff0d146104e957806371aac7f914610527578063743857cb1461053e576101ed565b806329dcb0cf1161017a5780634ef89719116101495780634ef89719146104165780635f7002661461044157806360fa9a721461046a5780636235887a14610495576101ed565b806329dcb0cf1461036e5780634278ac8b146103995780634585e33b146103c45780634d695bdb146103ed576101ed565b806315a46ee6116101b657806315a46ee61461029e5780631910bdc2146102c95780631c4b774b146103065780632636b94514610343576101ed565b8062362a95146101ef57806309917c501461020b5780630c611f24146102485780630fb5a6b414610273576101ed565b366101ed57005b005b61020960048036038101906102049190612be0565b61078e565b005b34801561021757600080fd5b50610232600480360381019061022d9190612be0565b610bb4565b60405161023f9190612c26565b60405180910390f35b34801561025457600080fd5b5061025d610bcc565b60405161026a9190612e96565b60405180910390f35b34801561027f57600080fd5b50610288610fc6565b6040516102959190612c26565b60405180910390f35b3480156102aa57600080fd5b506102b3610fcc565b6040516102c09190612f02565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb9190612be0565b61105a565b6040516102fd9190612fd3565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190613021565b6110f1565b60405161033a91906131f0565b60405180910390f35b34801561034f57600080fd5b5061035861142e565b6040516103659190612c26565b60405180910390f35b34801561037a57600080fd5b50610383611434565b6040516103909190612c26565b60405180910390f35b3480156103a557600080fd5b506103ae61143a565b6040516103bb9190612f02565b60405180910390f35b3480156103d057600080fd5b506103eb60048036038101906103e69190613277565b6114c8565b005b3480156103f957600080fd5b50610414600480360381019061040f91906133f4565b6115c6565b005b34801561042257600080fd5b5061042b611665565b6040516104389190612f02565b60405180910390f35b34801561044d57600080fd5b506104686004803603810190610463919061343d565b6116f3565b005b34801561047657600080fd5b5061047f611945565b60405161048c919061349f565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190613021565b611958565b6040516104c99190612c26565b60405180910390f35b3480156104de57600080fd5b506104e761197c565b005b3480156104f557600080fd5b50610510600480360381019061050b919061355b565b611b76565b60405161051e929190613608565b60405180910390f35b34801561053357600080fd5b5061053c611c4e565b005b34801561054a57600080fd5b50610553611d6d565b6040516105609190613680565b60405180910390f35b34801561057557600080fd5b50610590600480360381019061058b919061369b565b611d80565b60405161059d9190612c26565b60405180910390f35b3480156105b257600080fd5b506105bb611db1565b6040516105c89190612f02565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f391906137e8565b611e3f565b005b34801561060657600080fd5b5061060f611ffb565b60405161061c919061392f565b60405180910390f35b34801561063157600080fd5b5061063a61201f565b6040516106479190612fd3565b60405180910390f35b34801561065c57600080fd5b50610665612077565b6040516106729190612f02565b60405180910390f35b34801561068757600080fd5b50610690612105565b60405161069d9190612f02565b60405180910390f35b3480156106b257600080fd5b506106bb612193565b6040516106c89190612c26565b60405180910390f35b3480156106dd57600080fd5b506106f860048036038101906106f39190613021565b612199565b005b34801561070657600080fd5b50610721600480360381019061071c9190613021565b612303565b6040516107339695949392919061394a565b60405180910390f35b34801561074857600080fd5b50610763600480360381019061075e9190613021565b61245c565b005b34801561077157600080fd5b5061078c60048036038101906107879190612be0565b612562565b005b600260005414156107d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cb90613a05565b60405180910390fd5b60026000819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083457600080fd5b6000600281111561084857610847612cf8565b5b600b60019054906101000a900460ff16600281111561086a57610869612cf8565b5b146108a1576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610927576040517f1e4a120d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61093c346009546128c990919063ffffffff16565b6009819055506000600d6000348152602001908152602001600020600001541180156109895750600d600034815260200190815260200160002060060160009054906101000a900460ff16155b15610a5c576109b86001600d6000348152602001908152602001600020600501546128df90919063ffffffff16565b506000600d6000348152602001908152602001600020600501541415610a5b57600d6000348152602001908152602001600020600080820160009055600182016000610a0491906128f5565b600282016000610a1491906128f5565b600382016000610a249190612935565b600482016000905560058201600090556006820160006101000a81549060ff0219169055600782016000610a589190612935565b50505b5b600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020349080600181540180825580915050600190039060005260206000200160009091909190915055610b1434600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128c990919063ffffffff16565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fe76ad748537a48e778fef43dda4a6bd1b50cd62385f9f21a9ca267492355120834600954604051610ba1929190613a25565b60405180910390a2600160008190555050565b600f6020528060005260406000206000915090505481565b610bd4612956565b6040518061018001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200160018054610c2990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5590613a7d565b8015610ca25780601f10610c7757610100808354040283529160200191610ca2565b820191906000526020600020905b815481529060010190602001808311610c8557829003601f168201915b5050505050815260200160028054610cb990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce590613a7d565b8015610d325780601f10610d0757610100808354040283529160200191610d32565b820191906000526020600020905b815481529060010190602001808311610d1557829003601f168201915b5050505050815260200160038054610d4990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7590613a7d565b8015610dc25780601f10610d9757610100808354040283529160200191610dc2565b820191906000526020600020905b815481529060010190602001808311610da557829003601f168201915b5050505050815260200160068054610dd990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0590613a7d565b8015610e525780601f10610e2757610100808354040283529160200191610e52565b820191906000526020600020905b815481529060010190602001808311610e3557829003601f168201915b50505050508152602001600754815260200160085481526020016009548152602001600b60019054906101000a900460ff166002811115610e9657610e95612cf8565b5b815260200160048054610ea890613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed490613a7d565b8015610f215780601f10610ef657610100808354040283529160200191610f21565b820191906000526020600020905b815481529060010190602001808311610f0457829003601f168201915b5050505050815260200160058054610f3890613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6490613a7d565b8015610fb15780601f10610f8657610100808354040283529160200191610fb1565b820191906000526020600020905b815481529060010190602001808311610f9457829003601f168201915b50505050508152602001600a54815250905090565b60085481565b60058054610fd990613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461100590613a7d565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b505050505081565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156110e557602002820191906000526020600020905b8154815260200190600101908083116110d1575b50505050509050919050565b6110f96129df565b600d6000838152602001908152602001600020604051806101000160405290816000820154815260200160018201805461113290613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461115e90613a7d565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b505050505081526020016002820180546111c490613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546111f090613a7d565b801561123d5780601f106112125761010080835404028352916020019161123d565b820191906000526020600020905b81548152906001019060200180831161122057829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561131757838290600052602060002001805461128a90613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546112b690613a7d565b80156113035780601f106112d857610100808354040283529160200191611303565b820191906000526020600020905b8154815290600101906020018083116112e657829003601f168201915b50505050508152602001906001019061126b565b50505050815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561141f57838290600052602060002001805461139290613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546113be90613a7d565b801561140b5780601f106113e05761010080835404028352916020019161140b565b820191906000526020600020905b8154815290600101906020018083116113ee57829003601f168201915b505050505081526020019060010190611373565b50505050815250509050919050565b60075481565b600a5481565b6003805461144790613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461147390613a7d565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b505050505081565b60006114e260405180602001604052806000815250611b76565b5090508061151c576040517fbc7a0a6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b60016101000a81548160ff0219169083600281111561154257611541612cf8565b5b02179055507f5cf8cd2bd40f758a95257bed666285eb82801f1bf9223b8ec1481e510ba2e82d306040516115769190613abe565b60405180910390a1600754600954106115c1577f5369558c667e962b633128a01c31764d053da51f61d17370d327ed17f77deccc306040516115b89190613abe565b60405180910390a15b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461164b576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060059080519060200190611661929190612a26565b5050565b6002805461167290613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461169e90613a7d565b80156116eb5780601f106116c0576101008083540402835291602001916116eb565b820191906000526020600020905b8154815290600101906020018083116116ce57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611778576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000839050600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016117bd9190613abe565b60206040518083038186803b1580156117d557600080fd5b505afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190613aee565b141561184e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184590613b67565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16634c7e9be36001856207a1207f0000000000000000000000000000000000000000000000000000000000000000671bc16d674ec800006040518663ffffffff1660e01b81526004016118bb959493929190613d65565b602060405180830381600087803b1580156118d557600080fd5b505af11580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190613aee565b600c819055506001600b60006101000a81548160ff0219169083600181111561193957611938612cf8565b5b02179055505050505050565b600b60019054906101000a900460ff1681565b6010818154811061196857600080fd5b906000526020600020016000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a01576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611a1557611a14612cf8565b5b600b60019054906101000a900460ff166002811115611a3757611a36612cf8565b5b14611a6e576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009549050600060098190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051611ac390613e2a565b60006040518083038185875af1925050503d8060008114611b00576040519150601f19603f3d011682016040523d82523d6000602084013e611b05565b606091505b505090508015611b6d577fba5e837743d81ad0e6deb16089dbb65b549fdda8ad802fd8d4822884d70dc8b27f000000000000000000000000000000000000000000000000000000000000000030604051611b60929190613e3f565b60405180910390a1611b72565b600080fd5b5050565b600060606000806002811115611b8f57611b8e612cf8565b5b600b60019054906101000a900460ff166002811115611bb157611bb0612cf8565b5b1490506000600854611bec7f0000000000000000000000000000000000000000000000000000000000000000426128df90919063ffffffff16565b11905060008047119050818015611c005750825b8015611c095750805b9450846040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525094509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cd3576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611ce757611ce6612cf8565b5b600b60019054906101000a900460ff166002811115611d0957611d08612cf8565b5b1415611d1457600080fd5b6002600b60016101000a81548160ff02191690836002811115611d3a57611d39612cf8565b5b02179055507fb83ebe09f40e9293bdea1d6567fae3175119d3d0ff13c4b4df15994837dd7f5160405160405180910390a1565b600b60009054906101000a900460ff1681565b600e6020528160005260406000208181548110611d9c57600080fd5b90600052602060002001600091509150505481565b60018054611dbe90613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611dea90613a7d565b8015611e375780601f10611e0c57610100808354040283529160200191611e37565b820191906000526020600020905b815481529060010190602001808311611e1a57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ec4576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6010889080600181540180825580915050600190039060005260206000200160009091909190915055604051806101000160405280898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182815250600d60008a8152602001908152602001600020600082015181600001556020820151816001019080519060200190611f62929190612a26565b506040820151816002019080519060200190611f7f929190612a26565b506060820151816003019080519060200190611f9c929190612aac565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e0820151816007019080519060200190611fed929190612aac565b509050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060601080548060200260200160405190810160405280929190818152602001828054801561206d57602002820191906000526020600020905b815481526020019060010190808311612059575b5050505050905090565b6006805461208490613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546120b090613a7d565b80156120fd5780601f106120d2576101008083540402835291602001916120fd565b820191906000526020600020905b8154815290600101906020018083116120e057829003601f168201915b505050505081565b6004805461211290613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461213e90613a7d565b801561218b5780601f106121605761010080835404028352916020019161218b565b820191906000526020600020905b81548152906001019060200180831161216e57829003601f168201915b505050505081565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461221e576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561223257612231612cf8565b5b600b60009054906101000a900460ff16600181111561225457612253612cf8565b5b1461225e57600080fd5b6000600d600083815260200190815260200160002060000154111561230057600d60008281526020019081526020016000206000808201600090556001820160006122a991906128f5565b6002820160006122b991906128f5565b6003820160006122c99190612935565b600482016000905560058201600090556006820160006101000a81549060ff02191690556007820160006122fd9190612935565b50505b50565b600d60205280600052604060002060009150905080600001549080600101805461232c90613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461235890613a7d565b80156123a55780601f1061237a576101008083540402835291602001916123a5565b820191906000526020600020905b81548152906001019060200180831161238857829003601f168201915b5050505050908060020180546123ba90613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546123e690613a7d565b80156124335780601f1061240857610100808354040283529160200191612433565b820191906000526020600020905b81548152906001019060200180831161241657829003601f168201915b5050505050908060040154908060050154908060060160009054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124e1576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b624f1a006124fa826008546128c990919063ffffffff16565b1161251957612514816008546128c990919063ffffffff16565b61251e565b624f1a005b6008819055506125596008547f00000000000000000000000000000000000000000000000000000000000000006128c990919063ffffffff16565b600a8190555050565b600260005414156125a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259f90613a05565b60405180910390fd5b60026000819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461260857600080fd5b6001600281111561261c5761261b612cf8565b5b600b60019054906101000a900460ff16600281111561263e5761263d612cf8565b5b1415612676576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156126f0576040517f4cc8b68700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050806009541015612770576040517f4d83c95000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612785816009546128df90919063ffffffff16565b60098190555060008273ffffffffffffffffffffffffffffffffffffffff16826040516127b190613e2a565b60006040518083038185875af1925050503d80600081146127ee576040519150601f19603f3d011682016040523d82523d6000602084013e6127f3565b606091505b505090508061282e576040517f0520edd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006128799190612b0c565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050600160008190555050565b600081836128d79190613e97565b905092915050565b600081836128ed9190613eed565b905092915050565b50805461290190613a7d565b6000825580601f106129135750612932565b601f0160209004906000526020600020908101906129319190612b2d565b5b50565b50805460008255906000526020600020908101906129539190612b4a565b50565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600060028111156129c4576129c3612cf8565b5b81526020016060815260200160608152602001600081525090565b604051806101000160405280600081526020016060815260200160608152602001606081526020016000815260200160008152602001600015158152602001606081525090565b828054612a3290613a7d565b90600052602060002090601f016020900481019282612a545760008555612a9b565b82601f10612a6d57805160ff1916838001178555612a9b565b82800160010185558215612a9b579182015b82811115612a9a578251825591602001919060010190612a7f565b5b509050612aa89190612b2d565b5090565b828054828255906000526020600020908101928215612afb579160200282015b82811115612afa578251829080519060200190612aea929190612a26565b5091602001919060010190612acc565b5b509050612b089190612b4a565b5090565b5080546000825590600052602060002090810190612b2a9190612b2d565b50565b5b80821115612b46576000816000905550600101612b2e565b5090565b5b80821115612b6a5760008181612b6191906128f5565b50600101612b4b565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bad82612b82565b9050919050565b612bbd81612ba2565b8114612bc857600080fd5b50565b600081359050612bda81612bb4565b92915050565b600060208284031215612bf657612bf5612b78565b5b6000612c0484828501612bcb565b91505092915050565b6000819050919050565b612c2081612c0d565b82525050565b6000602082019050612c3b6000830184612c17565b92915050565b612c4a81612ba2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c8a578082015181840152602081019050612c6f565b83811115612c99576000848401525b50505050565b6000601f19601f8301169050919050565b6000612cbb82612c50565b612cc58185612c5b565b9350612cd5818560208601612c6c565b612cde81612c9f565b840191505092915050565b612cf281612c0d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d3857612d37612cf8565b5b50565b6000819050612d4982612d27565b919050565b6000612d5982612d3b565b9050919050565b612d6981612d4e565b82525050565b600061018083016000830151612d886000860182612c41565b5060208301518482036020860152612da08282612cb0565b91505060408301518482036040860152612dba8282612cb0565b91505060608301518482036060860152612dd48282612cb0565b91505060808301518482036080860152612dee8282612cb0565b91505060a0830151612e0360a0860182612ce9565b5060c0830151612e1660c0860182612ce9565b5060e0830151612e2960e0860182612ce9565b50610100830151612e3e610100860182612d60565b50610120830151848203610120860152612e588282612cb0565b915050610140830151848203610140860152612e748282612cb0565b915050610160830151612e8b610160860182612ce9565b508091505092915050565b60006020820190508181036000830152612eb08184612d6f565b905092915050565b600082825260208201905092915050565b6000612ed482612c50565b612ede8185612eb8565b9350612eee818560208601612c6c565b612ef781612c9f565b840191505092915050565b60006020820190508181036000830152612f1c8184612ec9565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612f5c8383612ce9565b60208301905092915050565b6000602082019050919050565b6000612f8082612f24565b612f8a8185612f2f565b9350612f9583612f40565b8060005b83811015612fc6578151612fad8882612f50565b9750612fb883612f68565b925050600181019050612f99565b5085935050505092915050565b60006020820190508181036000830152612fed8184612f75565b905092915050565b612ffe81612c0d565b811461300957600080fd5b50565b60008135905061301b81612ff5565b92915050565b60006020828403121561303757613036612b78565b5b60006130458482850161300c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006130868383612cb0565b905092915050565b6000602082019050919050565b60006130a68261304e565b6130b08185613059565b9350836020820285016130c28561306a565b8060005b858110156130fe57848403895281516130df858261307a565b94506130ea8361308e565b925060208a019950506001810190506130c6565b50829750879550505050505092915050565b60008115159050919050565b61312581613110565b82525050565b6000610100830160008301516131446000860182612ce9565b506020830151848203602086015261315c8282612cb0565b915050604083015184820360408601526131768282612cb0565b91505060608301518482036060860152613190828261309b565b91505060808301516131a56080860182612ce9565b5060a08301516131b860a0860182612ce9565b5060c08301516131cb60c086018261311c565b5060e083015184820360e08601526131e3828261309b565b9150508091505092915050565b6000602082019050818103600083015261320a818461312b565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261323757613236613212565b5b8235905067ffffffffffffffff81111561325457613253613217565b5b6020830191508360018202830111156132705761326f61321c565b5b9250929050565b6000806020838503121561328e5761328d612b78565b5b600083013567ffffffffffffffff8111156132ac576132ab612b7d565b5b6132b885828601613221565b92509250509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61330182612c9f565b810181811067ffffffffffffffff821117156133205761331f6132c9565b5b80604052505050565b6000613333612b6e565b905061333f82826132f8565b919050565b600067ffffffffffffffff82111561335f5761335e6132c9565b5b61336882612c9f565b9050602081019050919050565b82818337600083830152505050565b600061339761339284613344565b613329565b9050828152602081018484840111156133b3576133b26132c4565b5b6133be848285613375565b509392505050565b600082601f8301126133db576133da613212565b5b81356133eb848260208601613384565b91505092915050565b60006020828403121561340a57613409612b78565b5b600082013567ffffffffffffffff81111561342857613427612b7d565b5b613434848285016133c6565b91505092915050565b60008060006060848603121561345657613455612b78565b5b600061346486828701612bcb565b935050602061347586828701612bcb565b925050604061348686828701612bcb565b9150509250925092565b61349981612d4e565b82525050565b60006020820190506134b46000830184613490565b92915050565b600067ffffffffffffffff8211156134d5576134d46132c9565b5b6134de82612c9f565b9050602081019050919050565b60006134fe6134f9846134ba565b613329565b90508281526020810184848401111561351a576135196132c4565b5b613525848285613375565b509392505050565b600082601f83011261354257613541613212565b5b81356135528482602086016134eb565b91505092915050565b60006020828403121561357157613570612b78565b5b600082013567ffffffffffffffff81111561358f5761358e612b7d565b5b61359b8482850161352d565b91505092915050565b6135ad81613110565b82525050565b600081519050919050565b600082825260208201905092915050565b60006135da826135b3565b6135e481856135be565b93506135f4818560208601612c6c565b6135fd81612c9f565b840191505092915050565b600060408201905061361d60008301856135a4565b818103602083015261362f81846135cf565b90509392505050565b6002811061364957613648612cf8565b5b50565b600081905061365a82613638565b919050565b600061366a8261364c565b9050919050565b61367a8161365f565b82525050565b60006020820190506136956000830184613671565b92915050565b600080604083850312156136b2576136b1612b78565b5b60006136c085828601612bcb565b92505060206136d18582860161300c565b9150509250929050565b600067ffffffffffffffff8211156136f6576136f56132c9565b5b602082029050602081019050919050565b600061371a613715846136db565b613329565b9050808382526020820190506020840283018581111561373d5761373c61321c565b5b835b8181101561378457803567ffffffffffffffff81111561376257613761613212565b5b80860161376f89826133c6565b8552602085019450505060208101905061373f565b5050509392505050565b600082601f8301126137a3576137a2613212565b5b81356137b3848260208601613707565b91505092915050565b6137c581613110565b81146137d057600080fd5b50565b6000813590506137e2816137bc565b92915050565b600080600080600080600080610100898b03121561380957613808612b78565b5b60006138178b828c0161300c565b985050602089013567ffffffffffffffff81111561383857613837612b7d565b5b6138448b828c016133c6565b975050604089013567ffffffffffffffff81111561386557613864612b7d565b5b6138718b828c016133c6565b965050606089013567ffffffffffffffff81111561389257613891612b7d565b5b61389e8b828c0161378e565b95505060806138af8b828c0161300c565b94505060a06138c08b828c0161300c565b93505060c06138d18b828c016137d3565b92505060e089013567ffffffffffffffff8111156138f2576138f1612b7d565b5b6138fe8b828c0161378e565b9150509295985092959890939650565b600061391982612b82565b9050919050565b6139298161390e565b82525050565b60006020820190506139446000830184613920565b92915050565b600060c08201905061395f6000830189612c17565b81810360208301526139718188612ec9565b905081810360408301526139858187612ec9565b90506139946060830186612c17565b6139a16080830185612c17565b6139ae60a08301846135a4565b979650505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006139ef601f83612eb8565b91506139fa826139b9565b602082019050919050565b60006020820190508181036000830152613a1e816139e2565b9050919050565b6000604082019050613a3a6000830185612c17565b613a476020830184612c17565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613a9557607f821691505b60208210811415613aa957613aa8613a4e565b5b50919050565b613ab881612ba2565b82525050565b6000602082019050613ad36000830184613aaf565b92915050565b600081519050613ae881612ff5565b92915050565b600060208284031215613b0457613b03612b78565b5b6000613b1284828501613ad9565b91505092915050565b7f6e6f2066756e6473000000000000000000000000000000000000000000000000600082015250565b6000613b51600883612eb8565b9150613b5c82613b1b565b602082019050919050565b60006020820190508181036000830152613b8081613b44565b9050919050565b60008190508160005260206000209050919050565b60008154613ba981613a7d565b613bb38186612eb8565b94506001821660008114613bce5760018114613be057613c13565b60ff1983168652602086019350613c13565b613be985613b87565b60005b83811015613c0b57815481890152600182019150602081019050613bec565b808801955050505b50505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000613c526002836135be565b9150613c5d82613c1c565b602082019050919050565b6000819050919050565b600063ffffffff82169050919050565b6000819050919050565b6000613ca7613ca2613c9d84613c68565b613c82565b613c72565b9050919050565b613cb781613c8c565b82525050565b6000613cd8613cd3613cce84612b82565b613c82565b612b82565b9050919050565b6000613cea82613cbd565b9050919050565b6000613cfc82613cdf565b9050919050565b613d0c81613cf1565b82525050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b6000613d4f613d4a613d4584613d12565b613c82565b613d1c565b9050919050565b613d5f81613d34565b82525050565b6000610100820190508181036000830152613d808188613b9c565b90508181036020830152613d9381613c45565b9050613da26040830187613aaf565b613daf6060830186613cae565b613dbc6080830185613d03565b81810360a0830152613dcd81613c45565b905081810360c0830152613de081613c45565b9050613def60e0830184613d56565b9695505050505050565b600081905092915050565b50565b6000613e14600083613df9565b9150613e1f82613e04565b600082019050919050565b6000613e3582613e07565b9150819050919050565b6000604082019050613e546000830185613d03565b613e616020830184613aaf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ea282612c0d565b9150613ead83612c0d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ee257613ee1613e68565b5b828201905092915050565b6000613ef882612c0d565b9150613f0383612c0d565b925082821015613f1657613f15613e68565b5b82820390509291505056fea2646970667358221220e3d1928ec6ba71322a1cd5cc734b20f2aab496b10d890e1c5c141c727500846164736f6c63430008080033a2646970667358221220bef9dce703023072236e84d5a7039adacbc53dac6b65174d301b1d1f35d398f464736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106200007f5760003560e01c8063bbfade3e1162000055578063bbfade3e1462000105578063e4663a5b1462000133578063fab62a1d1462000161578063fca604d7146200018f5762000087565b80631a702aa014620000895780637c6abc8214620000b7578063ac3d15fb14620000d75762000087565b366200008757005b005b3480156200009657600080fd5b50620000b56004803603810190620000af919062000e67565b620001bf565b005b620000d56004803603810190620000cf919062000f9e565b6200021f565b005b348015620000e457600080fd5b50620001036004803603810190620000fd919062000f9e565b620003c9565b005b3480156200011257600080fd5b506200013160048036038101906200012b91906200100b565b62000674565b005b3480156200014057600080fd5b506200015f600480360381019062000159919062000f9e565b620007b6565b005b3480156200016e57600080fd5b506200018d600480360381019062000187919062001159565b62000ac0565b005b3480156200019c57600080fd5b50620001a762000c60565b604051620001b69190620011c6565b60405180910390f35b8573ffffffffffffffffffffffffffffffffffffffff167f8a71481c426e212d085148853642cbd73769f57ca8e2a96eca998197465ab41686868686866040516200020f95949392919062001276565b60405180910390a2505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1634336040516024016200024c919062001307565b6040516020818303038152906040527e362a95000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051620002d7919062001371565b60006040518083038185875af1925050503d806000811462000316576040519150601f19603f3d011682016040523d82523d6000602084013e6200031b565b606091505b50509050801562000393578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f31dfdd0cdbba4daad7dbdc3bee4f31a7843784462febd6b9a72a11b282c41ef934604051620003859190620011c6565b60405180910390a3620003c5565b6040517f6bfd065c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309917c50336040518263ffffffff1660e01b815260040162000465919062001307565b60206040518083038186803b1580156200047e57600080fd5b505afa15801562000493573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b99190620013a1565b905060008111620004c957600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1633604051602401620004f5919062001307565b6040516020818303038152906040527ffa89401a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000581919062001371565b6000604051808303816000865af19150503d8060008114620005c0576040519150601f19603f3d011682016040523d82523d6000602084013e620005c5565b606091505b5050905080156200063d578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8cb455cec59b17d4c723945fe8127937707037e0bb6da7ed63742fcb9f6babe3846040516200062f9190620011c6565b60405180910390a36200066f565b6040517fda3e747c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60003033898989898989896040516200068d9062000c7e565b620006a1999897969594939291906200143e565b604051809103906000f080158015620006be573d6000803e3d6000fd5b50905080600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f54aab6ebc201e42488e3fdefdd10c9b99816e9dc15e8a77f1fba0bd435a414578a8a8a8a604051620007a4949392919062001500565b60405180910390a35050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b145603e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200087357600080fd5b505afa15801562000888573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008ae9190620015ae565b73ffffffffffffffffffffffffffffffffffffffff1614620008fc576040517f06256c5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce845d1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009a457600080fd5b505afa158015620009b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009df9190620013a1565b111562000a18576040517fb2032d6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558073ffffffffffffffffffffffffffffffffffffffff167fd41d62ed7a46b1f2f4c0a4c0fa40c95bbe14a7d55034ff9817b743d6cb79353660405160405180910390a250565b60008373ffffffffffffffffffffffffffffffffffffffff1683838660405160240162000af093929190620015e0565b6040516020818303038152906040527f5f700266000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000b7c919062001371565b600060405180830381855af49150503d806000811462000bb9576040519150601f19603f3d011682016040523d82523d6000602084013e62000bbe565b606091505b50509050801562000c285762000be1600160005462000c6690919063ffffffff16565b6000819055507f4ee76a1c89ccbef26f098ac48c95b7da87fe34749fea8758a71a3dc4ccc28bcd843360405162000c1a9291906200161d565b60405180910390a162000c5a565b6040517f7f42f20d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60005481565b6000818362000c76919062001679565b905092915050565b61477b80620016d783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ccd8262000ca0565b9050919050565b62000cdf8162000cc0565b811462000ceb57600080fd5b50565b60008135905062000cff8162000cd4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000d5a8262000d0f565b810181811067ffffffffffffffff8211171562000d7c5762000d7b62000d20565b5b80604052505050565b600062000d9162000c8c565b905062000d9f828262000d4f565b919050565b600067ffffffffffffffff82111562000dc25762000dc162000d20565b5b62000dcd8262000d0f565b9050602081019050919050565b82818337600083830152505050565b600062000e0062000dfa8462000da4565b62000d85565b90508281526020810184848401111562000e1f5762000e1e62000d0a565b5b62000e2c84828562000dda565b509392505050565b600082601f83011262000e4c5762000e4b62000d05565b5b813562000e5e84826020860162000de9565b91505092915050565b60008060008060008060c0878903121562000e875762000e8662000c96565b5b600062000e9789828a0162000cee565b965050602087013567ffffffffffffffff81111562000ebb5762000eba62000c9b565b5b62000ec989828a0162000e34565b955050604087013567ffffffffffffffff81111562000eed5762000eec62000c9b565b5b62000efb89828a0162000e34565b945050606087013567ffffffffffffffff81111562000f1f5762000f1e62000c9b565b5b62000f2d89828a0162000e34565b935050608087013567ffffffffffffffff81111562000f515762000f5062000c9b565b5b62000f5f89828a0162000e34565b92505060a087013567ffffffffffffffff81111562000f835762000f8262000c9b565b5b62000f9189828a0162000e34565b9150509295509295509295565b60006020828403121562000fb75762000fb662000c96565b5b600062000fc78482850162000cee565b91505092915050565b6000819050919050565b62000fe58162000fd0565b811462000ff157600080fd5b50565b600081359050620010058162000fda565b92915050565b600080600080600080600060e0888a0312156200102d576200102c62000c96565b5b600088013567ffffffffffffffff8111156200104e576200104d62000c9b565b5b6200105c8a828b0162000e34565b975050602088013567ffffffffffffffff81111562001080576200107f62000c9b565b5b6200108e8a828b0162000e34565b965050604088013567ffffffffffffffff811115620010b257620010b162000c9b565b5b620010c08a828b0162000e34565b955050606088013567ffffffffffffffff811115620010e457620010e362000c9b565b5b620010f28a828b0162000e34565b9450506080620011058a828b0162000ff4565b93505060a0620011188a828b0162000ff4565b92505060c088013567ffffffffffffffff8111156200113c576200113b62000c9b565b5b6200114a8a828b0162000e34565b91505092959891949750929550565b60008060006060848603121562001175576200117462000c96565b5b6000620011858682870162000cee565b9350506020620011988682870162000cee565b9250506040620011ab8682870162000cee565b9150509250925092565b620011c08162000fd0565b82525050565b6000602082019050620011dd6000830184620011b5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200121f57808201518184015260208101905062001202565b838111156200122f576000848401525b50505050565b60006200124282620011e3565b6200124e8185620011ee565b935062001260818560208601620011ff565b6200126b8162000d0f565b840191505092915050565b600060a082019050818103600083015262001292818862001235565b90508181036020830152620012a8818762001235565b90508181036040830152620012be818662001235565b90508181036060830152620012d4818562001235565b90508181036080830152620012ea818462001235565b90509695505050505050565b620013018162000cc0565b82525050565b60006020820190506200131e6000830184620012f6565b92915050565b600081519050919050565b600081905092915050565b6000620013478262001324565b6200135381856200132f565b935062001365818560208601620011ff565b80840191505092915050565b60006200137f82846200133a565b915081905092915050565b6000815190506200139b8162000fda565b92915050565b600060208284031215620013ba57620013b962000c96565b5b6000620013ca848285016200138a565b91505092915050565b6000819050919050565b6000620013fe620013f8620013f28462000ca0565b620013d3565b62000ca0565b9050919050565b60006200141282620013dd565b9050919050565b6000620014268262001405565b9050919050565b620014388162001419565b82525050565b60006101208201905062001456600083018c620012f6565b62001465602083018b6200142d565b818103604083015262001479818a62001235565b905081810360608301526200148f818962001235565b90508181036080830152620014a5818862001235565b905081810360a0830152620014bb818762001235565b9050620014cc60c0830186620011b5565b620014db60e0830185620011b5565b818103610100830152620014f0818462001235565b90509a9950505050505050505050565b600060808201905081810360008301526200151c818762001235565b9050818103602083015262001532818662001235565b9050818103604083015262001548818562001235565b905081810360608301526200155e818462001235565b905095945050505050565b6000620015768262000ca0565b9050919050565b620015888162001569565b81146200159457600080fd5b50565b600081519050620015a8816200157d565b92915050565b600060208284031215620015c757620015c662000c96565b5b6000620015d78482850162001597565b91505092915050565b6000606082019050620015f76000830186620012f6565b620016066020830185620012f6565b620016156040830184620012f6565b949350505050565b6000604082019050620016346000830185620012f6565b620016436020830184620012f6565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620016868262000fd0565b9150620016938362000fd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620016cb57620016ca6200164a565b5b82820190509291505056fe60e06040526000600b60006101000a81548160ff021916908360018111156200002d576200002c620002b5565b5b02179055506000600b60016101000a81548160ff021916908360028111156200005b576200005a620002b5565b5b02179055503480156200006d57600080fd5b506040516200477b3803806200477b833981810160405281019062000093919062000521565b60016000819055508873ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508773ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505086600190805190602001906200012192919062000205565b5085600290805190602001906200013a92919062000205565b5084600390805190602001906200015392919062000205565b5083600690805190602001906200016c92919062000205565b50826007819055504260c08181525050624f1a0082116200018e578162000193565b624f1a005b600881905550620001b760085460c051620001ed60201b620028c91790919060201c565b600a819055508060049080519060200190620001d592919062000205565b5060006009819055505050505050505050506200078c565b60008183620001fd9190620006ca565b905092915050565b828054620002139062000756565b90600052602060002090601f01602090048101928262000237576000855562000283565b82601f106200025257805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028257825182559160200191906001019062000265565b5b50905062000292919062000296565b5090565b5b80821115620002b157600081600090555060010162000297565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032582620002f8565b9050919050565b620003378162000318565b81146200034357600080fd5b50565b60008151905062000357816200032c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003b28262000367565b810181811067ffffffffffffffff82111715620003d457620003d362000378565b5b80604052505050565b6000620003e9620002e4565b9050620003f78282620003a7565b919050565b600067ffffffffffffffff8211156200041a576200041962000378565b5b620004258262000367565b9050602081019050919050565b60005b838110156200045257808201518184015260208101905062000435565b8381111562000462576000848401525b50505050565b60006200047f6200047984620003fc565b620003dd565b9050828152602081018484840111156200049e576200049d62000362565b5b620004ab84828562000432565b509392505050565b600082601f830112620004cb57620004ca6200035d565b5b8151620004dd84826020860162000468565b91505092915050565b6000819050919050565b620004fb81620004e6565b81146200050757600080fd5b50565b6000815190506200051b81620004f0565b92915050565b60008060008060008060008060006101208a8c031215620005475762000546620002ee565b5b6000620005578c828d0162000346565b99505060206200056a8c828d0162000346565b98505060408a015167ffffffffffffffff8111156200058e576200058d620002f3565b5b6200059c8c828d01620004b3565b97505060608a015167ffffffffffffffff811115620005c057620005bf620002f3565b5b620005ce8c828d01620004b3565b96505060808a015167ffffffffffffffff811115620005f257620005f1620002f3565b5b620006008c828d01620004b3565b95505060a08a015167ffffffffffffffff811115620006245762000623620002f3565b5b620006328c828d01620004b3565b94505060c0620006458c828d016200050a565b93505060e0620006588c828d016200050a565b9250506101008a015167ffffffffffffffff8111156200067d576200067c620002f3565b5b6200068b8c828d01620004b3565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006d782620004e6565b9150620006e483620004e6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200071c576200071b6200069b565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200076f57607f821691505b6020821081141562000786576200078562000727565b5b50919050565b60805160601c60a05160601c60c051613f576200082460003960008181611bbe015261252c0152600081816108a301528181610be2015281816115c8015281816116f5015281816118730152818161197e01528181611a8101528181611b3201528181611c5001528181611e4101528181611ffd0152818161219b015261245e0152600081816107de01526125b20152613f576000f3fe6080604052600436106101e65760003560e01c806363bd1d4a11610102578063bf66e2c811610095578063e7cf1ab711610064578063e7cf1ab7146106d1578063f301af42146106fa578063fa6ded391461073c578063fa89401a14610765576101ed565b8063bf66e2c814610625578063c5cd507814610650578063ce2a05721461067b578063ce845d1d146106a6576101ed565b806395086ed1116100d157806395086ed11461056957806399a8502d146105a65780639a913793146105d1578063b145603e146105fa576101ed565b806363bd1d4a146104d25780636e04ff0d146104e957806371aac7f914610527578063743857cb1461053e576101ed565b806329dcb0cf1161017a5780634ef89719116101495780634ef89719146104165780635f7002661461044157806360fa9a721461046a5780636235887a14610495576101ed565b806329dcb0cf1461036e5780634278ac8b146103995780634585e33b146103c45780634d695bdb146103ed576101ed565b806315a46ee6116101b657806315a46ee61461029e5780631910bdc2146102c95780631c4b774b146103065780632636b94514610343576101ed565b8062362a95146101ef57806309917c501461020b5780630c611f24146102485780630fb5a6b414610273576101ed565b366101ed57005b005b61020960048036038101906102049190612be0565b61078e565b005b34801561021757600080fd5b50610232600480360381019061022d9190612be0565b610bb4565b60405161023f9190612c26565b60405180910390f35b34801561025457600080fd5b5061025d610bcc565b60405161026a9190612e96565b60405180910390f35b34801561027f57600080fd5b50610288610fc6565b6040516102959190612c26565b60405180910390f35b3480156102aa57600080fd5b506102b3610fcc565b6040516102c09190612f02565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb9190612be0565b61105a565b6040516102fd9190612fd3565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190613021565b6110f1565b60405161033a91906131f0565b60405180910390f35b34801561034f57600080fd5b5061035861142e565b6040516103659190612c26565b60405180910390f35b34801561037a57600080fd5b50610383611434565b6040516103909190612c26565b60405180910390f35b3480156103a557600080fd5b506103ae61143a565b6040516103bb9190612f02565b60405180910390f35b3480156103d057600080fd5b506103eb60048036038101906103e69190613277565b6114c8565b005b3480156103f957600080fd5b50610414600480360381019061040f91906133f4565b6115c6565b005b34801561042257600080fd5b5061042b611665565b6040516104389190612f02565b60405180910390f35b34801561044d57600080fd5b506104686004803603810190610463919061343d565b6116f3565b005b34801561047657600080fd5b5061047f611945565b60405161048c919061349f565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190613021565b611958565b6040516104c99190612c26565b60405180910390f35b3480156104de57600080fd5b506104e761197c565b005b3480156104f557600080fd5b50610510600480360381019061050b919061355b565b611b76565b60405161051e929190613608565b60405180910390f35b34801561053357600080fd5b5061053c611c4e565b005b34801561054a57600080fd5b50610553611d6d565b6040516105609190613680565b60405180910390f35b34801561057557600080fd5b50610590600480360381019061058b919061369b565b611d80565b60405161059d9190612c26565b60405180910390f35b3480156105b257600080fd5b506105bb611db1565b6040516105c89190612f02565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f391906137e8565b611e3f565b005b34801561060657600080fd5b5061060f611ffb565b60405161061c919061392f565b60405180910390f35b34801561063157600080fd5b5061063a61201f565b6040516106479190612fd3565b60405180910390f35b34801561065c57600080fd5b50610665612077565b6040516106729190612f02565b60405180910390f35b34801561068757600080fd5b50610690612105565b60405161069d9190612f02565b60405180910390f35b3480156106b257600080fd5b506106bb612193565b6040516106c89190612c26565b60405180910390f35b3480156106dd57600080fd5b506106f860048036038101906106f39190613021565b612199565b005b34801561070657600080fd5b50610721600480360381019061071c9190613021565b612303565b6040516107339695949392919061394a565b60405180910390f35b34801561074857600080fd5b50610763600480360381019061075e9190613021565b61245c565b005b34801561077157600080fd5b5061078c60048036038101906107879190612be0565b612562565b005b600260005414156107d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cb90613a05565b60405180910390fd5b60026000819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083457600080fd5b6000600281111561084857610847612cf8565b5b600b60019054906101000a900460ff16600281111561086a57610869612cf8565b5b146108a1576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610927576040517f1e4a120d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61093c346009546128c990919063ffffffff16565b6009819055506000600d6000348152602001908152602001600020600001541180156109895750600d600034815260200190815260200160002060060160009054906101000a900460ff16155b15610a5c576109b86001600d6000348152602001908152602001600020600501546128df90919063ffffffff16565b506000600d6000348152602001908152602001600020600501541415610a5b57600d6000348152602001908152602001600020600080820160009055600182016000610a0491906128f5565b600282016000610a1491906128f5565b600382016000610a249190612935565b600482016000905560058201600090556006820160006101000a81549060ff0219169055600782016000610a589190612935565b50505b5b600e60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020349080600181540180825580915050600190039060005260206000200160009091909190915055610b1434600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128c990919063ffffffff16565b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fe76ad748537a48e778fef43dda4a6bd1b50cd62385f9f21a9ca267492355120834600954604051610ba1929190613a25565b60405180910390a2600160008190555050565b600f6020528060005260406000206000915090505481565b610bd4612956565b6040518061018001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200160018054610c2990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5590613a7d565b8015610ca25780601f10610c7757610100808354040283529160200191610ca2565b820191906000526020600020905b815481529060010190602001808311610c8557829003601f168201915b5050505050815260200160028054610cb990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce590613a7d565b8015610d325780601f10610d0757610100808354040283529160200191610d32565b820191906000526020600020905b815481529060010190602001808311610d1557829003601f168201915b5050505050815260200160038054610d4990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7590613a7d565b8015610dc25780601f10610d9757610100808354040283529160200191610dc2565b820191906000526020600020905b815481529060010190602001808311610da557829003601f168201915b5050505050815260200160068054610dd990613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0590613a7d565b8015610e525780601f10610e2757610100808354040283529160200191610e52565b820191906000526020600020905b815481529060010190602001808311610e3557829003601f168201915b50505050508152602001600754815260200160085481526020016009548152602001600b60019054906101000a900460ff166002811115610e9657610e95612cf8565b5b815260200160048054610ea890613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed490613a7d565b8015610f215780601f10610ef657610100808354040283529160200191610f21565b820191906000526020600020905b815481529060010190602001808311610f0457829003601f168201915b5050505050815260200160058054610f3890613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6490613a7d565b8015610fb15780601f10610f8657610100808354040283529160200191610fb1565b820191906000526020600020905b815481529060010190602001808311610f9457829003601f168201915b50505050508152602001600a54815250905090565b60085481565b60058054610fd990613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461100590613a7d565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b505050505081565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156110e557602002820191906000526020600020905b8154815260200190600101908083116110d1575b50505050509050919050565b6110f96129df565b600d6000838152602001908152602001600020604051806101000160405290816000820154815260200160018201805461113290613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461115e90613a7d565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b505050505081526020016002820180546111c490613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546111f090613a7d565b801561123d5780601f106112125761010080835404028352916020019161123d565b820191906000526020600020905b81548152906001019060200180831161122057829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561131757838290600052602060002001805461128a90613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546112b690613a7d565b80156113035780601f106112d857610100808354040283529160200191611303565b820191906000526020600020905b8154815290600101906020018083116112e657829003601f168201915b50505050508152602001906001019061126b565b50505050815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815260200160078201805480602002602001604051908101604052809291908181526020016000905b8282101561141f57838290600052602060002001805461139290613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546113be90613a7d565b801561140b5780601f106113e05761010080835404028352916020019161140b565b820191906000526020600020905b8154815290600101906020018083116113ee57829003601f168201915b505050505081526020019060010190611373565b50505050815250509050919050565b60075481565b600a5481565b6003805461144790613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461147390613a7d565b80156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b505050505081565b60006114e260405180602001604052806000815250611b76565b5090508061151c576040517fbc7a0a6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b60016101000a81548160ff0219169083600281111561154257611541612cf8565b5b02179055507f5cf8cd2bd40f758a95257bed666285eb82801f1bf9223b8ec1481e510ba2e82d306040516115769190613abe565b60405180910390a1600754600954106115c1577f5369558c667e962b633128a01c31764d053da51f61d17370d327ed17f77deccc306040516115b89190613abe565b60405180910390a15b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461164b576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060059080519060200190611661929190612a26565b5050565b6002805461167290613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461169e90613a7d565b80156116eb5780601f106116c0576101008083540402835291602001916116eb565b820191906000526020600020905b8154815290600101906020018083116116ce57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611778576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000839050600083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016117bd9190613abe565b60206040518083038186803b1580156117d557600080fd5b505afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190613aee565b141561184e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184590613b67565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16634c7e9be36001856207a1207f0000000000000000000000000000000000000000000000000000000000000000671bc16d674ec800006040518663ffffffff1660e01b81526004016118bb959493929190613d65565b602060405180830381600087803b1580156118d557600080fd5b505af11580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190613aee565b600c819055506001600b60006101000a81548160ff0219169083600181111561193957611938612cf8565b5b02179055505050505050565b600b60019054906101000a900460ff1681565b6010818154811061196857600080fd5b906000526020600020016000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a01576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611a1557611a14612cf8565b5b600b60019054906101000a900460ff166002811115611a3757611a36612cf8565b5b14611a6e576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009549050600060098190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051611ac390613e2a565b60006040518083038185875af1925050503d8060008114611b00576040519150601f19603f3d011682016040523d82523d6000602084013e611b05565b606091505b505090508015611b6d577fba5e837743d81ad0e6deb16089dbb65b549fdda8ad802fd8d4822884d70dc8b27f000000000000000000000000000000000000000000000000000000000000000030604051611b60929190613e3f565b60405180910390a1611b72565b600080fd5b5050565b600060606000806002811115611b8f57611b8e612cf8565b5b600b60019054906101000a900460ff166002811115611bb157611bb0612cf8565b5b1490506000600854611bec7f0000000000000000000000000000000000000000000000000000000000000000426128df90919063ffffffff16565b11905060008047119050818015611c005750825b8015611c095750805b9450846040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525094509450505050915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cd3576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611ce757611ce6612cf8565b5b600b60019054906101000a900460ff166002811115611d0957611d08612cf8565b5b1415611d1457600080fd5b6002600b60016101000a81548160ff02191690836002811115611d3a57611d39612cf8565b5b02179055507fb83ebe09f40e9293bdea1d6567fae3175119d3d0ff13c4b4df15994837dd7f5160405160405180910390a1565b600b60009054906101000a900460ff1681565b600e6020528160005260406000208181548110611d9c57600080fd5b90600052602060002001600091509150505481565b60018054611dbe90613a7d565b80601f0160208091040260200160405190810160405280929190818152602001828054611dea90613a7d565b8015611e375780601f10611e0c57610100808354040283529160200191611e37565b820191906000526020600020905b815481529060010190602001808311611e1a57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ec4576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6010889080600181540180825580915050600190039060005260206000200160009091909190915055604051806101000160405280898152602001888152602001878152602001868152602001858152602001848152602001831515815260200182815250600d60008a8152602001908152602001600020600082015181600001556020820151816001019080519060200190611f62929190612a26565b506040820151816002019080519060200190611f7f929190612a26565b506060820151816003019080519060200190611f9c929190612aac565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e0820151816007019080519060200190611fed929190612aac565b509050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060601080548060200260200160405190810160405280929190818152602001828054801561206d57602002820191906000526020600020905b815481526020019060010190808311612059575b5050505050905090565b6006805461208490613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546120b090613a7d565b80156120fd5780601f106120d2576101008083540402835291602001916120fd565b820191906000526020600020905b8154815290600101906020018083116120e057829003601f168201915b505050505081565b6004805461211290613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461213e90613a7d565b801561218b5780601f106121605761010080835404028352916020019161218b565b820191906000526020600020905b81548152906001019060200180831161216e57829003601f168201915b505050505081565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461221e576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561223257612231612cf8565b5b600b60009054906101000a900460ff16600181111561225457612253612cf8565b5b1461225e57600080fd5b6000600d600083815260200190815260200160002060000154111561230057600d60008281526020019081526020016000206000808201600090556001820160006122a991906128f5565b6002820160006122b991906128f5565b6003820160006122c99190612935565b600482016000905560058201600090556006820160006101000a81549060ff02191690556007820160006122fd9190612935565b50505b50565b600d60205280600052604060002060009150905080600001549080600101805461232c90613a7d565b80601f016020809104026020016040519081016040528092919081815260200182805461235890613a7d565b80156123a55780601f1061237a576101008083540402835291602001916123a5565b820191906000526020600020905b81548152906001019060200180831161238857829003601f168201915b5050505050908060020180546123ba90613a7d565b80601f01602080910402602001604051908101604052809291908181526020018280546123e690613a7d565b80156124335780601f1061240857610100808354040283529160200191612433565b820191906000526020600020905b81548152906001019060200180831161241657829003601f168201915b5050505050908060040154908060050154908060060160009054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124e1576040517fb167e90c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b624f1a006124fa826008546128c990919063ffffffff16565b1161251957612514816008546128c990919063ffffffff16565b61251e565b624f1a005b6008819055506125596008547f00000000000000000000000000000000000000000000000000000000000000006128c990919063ffffffff16565b600a8190555050565b600260005414156125a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259f90613a05565b60405180910390fd5b60026000819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461260857600080fd5b6001600281111561261c5761261b612cf8565b5b600b60019054906101000a900460ff16600281111561263e5761263d612cf8565b5b1415612676576040517faeb8874900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156126f0576040517f4cc8b68700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050806009541015612770576040517f4d83c95000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612785816009546128df90919063ffffffff16565b60098190555060008273ffffffffffffffffffffffffffffffffffffffff16826040516127b190613e2a565b60006040518083038185875af1925050503d80600081146127ee576040519150601f19603f3d011682016040523d82523d6000602084013e6127f3565b606091505b505090508061282e576040517f0520edd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006128799190612b0c565b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050600160008190555050565b600081836128d79190613e97565b905092915050565b600081836128ed9190613eed565b905092915050565b50805461290190613a7d565b6000825580601f106129135750612932565b601f0160209004906000526020600020908101906129319190612b2d565b5b50565b50805460008255906000526020600020908101906129539190612b4a565b50565b604051806101800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600060028111156129c4576129c3612cf8565b5b81526020016060815260200160608152602001600081525090565b604051806101000160405280600081526020016060815260200160608152602001606081526020016000815260200160008152602001600015158152602001606081525090565b828054612a3290613a7d565b90600052602060002090601f016020900481019282612a545760008555612a9b565b82601f10612a6d57805160ff1916838001178555612a9b565b82800160010185558215612a9b579182015b82811115612a9a578251825591602001919060010190612a7f565b5b509050612aa89190612b2d565b5090565b828054828255906000526020600020908101928215612afb579160200282015b82811115612afa578251829080519060200190612aea929190612a26565b5091602001919060010190612acc565b5b509050612b089190612b4a565b5090565b5080546000825590600052602060002090810190612b2a9190612b2d565b50565b5b80821115612b46576000816000905550600101612b2e565b5090565b5b80821115612b6a5760008181612b6191906128f5565b50600101612b4b565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bad82612b82565b9050919050565b612bbd81612ba2565b8114612bc857600080fd5b50565b600081359050612bda81612bb4565b92915050565b600060208284031215612bf657612bf5612b78565b5b6000612c0484828501612bcb565b91505092915050565b6000819050919050565b612c2081612c0d565b82525050565b6000602082019050612c3b6000830184612c17565b92915050565b612c4a81612ba2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c8a578082015181840152602081019050612c6f565b83811115612c99576000848401525b50505050565b6000601f19601f8301169050919050565b6000612cbb82612c50565b612cc58185612c5b565b9350612cd5818560208601612c6c565b612cde81612c9f565b840191505092915050565b612cf281612c0d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612d3857612d37612cf8565b5b50565b6000819050612d4982612d27565b919050565b6000612d5982612d3b565b9050919050565b612d6981612d4e565b82525050565b600061018083016000830151612d886000860182612c41565b5060208301518482036020860152612da08282612cb0565b91505060408301518482036040860152612dba8282612cb0565b91505060608301518482036060860152612dd48282612cb0565b91505060808301518482036080860152612dee8282612cb0565b91505060a0830151612e0360a0860182612ce9565b5060c0830151612e1660c0860182612ce9565b5060e0830151612e2960e0860182612ce9565b50610100830151612e3e610100860182612d60565b50610120830151848203610120860152612e588282612cb0565b915050610140830151848203610140860152612e748282612cb0565b915050610160830151612e8b610160860182612ce9565b508091505092915050565b60006020820190508181036000830152612eb08184612d6f565b905092915050565b600082825260208201905092915050565b6000612ed482612c50565b612ede8185612eb8565b9350612eee818560208601612c6c565b612ef781612c9f565b840191505092915050565b60006020820190508181036000830152612f1c8184612ec9565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612f5c8383612ce9565b60208301905092915050565b6000602082019050919050565b6000612f8082612f24565b612f8a8185612f2f565b9350612f9583612f40565b8060005b83811015612fc6578151612fad8882612f50565b9750612fb883612f68565b925050600181019050612f99565b5085935050505092915050565b60006020820190508181036000830152612fed8184612f75565b905092915050565b612ffe81612c0d565b811461300957600080fd5b50565b60008135905061301b81612ff5565b92915050565b60006020828403121561303757613036612b78565b5b60006130458482850161300c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006130868383612cb0565b905092915050565b6000602082019050919050565b60006130a68261304e565b6130b08185613059565b9350836020820285016130c28561306a565b8060005b858110156130fe57848403895281516130df858261307a565b94506130ea8361308e565b925060208a019950506001810190506130c6565b50829750879550505050505092915050565b60008115159050919050565b61312581613110565b82525050565b6000610100830160008301516131446000860182612ce9565b506020830151848203602086015261315c8282612cb0565b915050604083015184820360408601526131768282612cb0565b91505060608301518482036060860152613190828261309b565b91505060808301516131a56080860182612ce9565b5060a08301516131b860a0860182612ce9565b5060c08301516131cb60c086018261311c565b5060e083015184820360e08601526131e3828261309b565b9150508091505092915050565b6000602082019050818103600083015261320a818461312b565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261323757613236613212565b5b8235905067ffffffffffffffff81111561325457613253613217565b5b6020830191508360018202830111156132705761326f61321c565b5b9250929050565b6000806020838503121561328e5761328d612b78565b5b600083013567ffffffffffffffff8111156132ac576132ab612b7d565b5b6132b885828601613221565b92509250509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61330182612c9f565b810181811067ffffffffffffffff821117156133205761331f6132c9565b5b80604052505050565b6000613333612b6e565b905061333f82826132f8565b919050565b600067ffffffffffffffff82111561335f5761335e6132c9565b5b61336882612c9f565b9050602081019050919050565b82818337600083830152505050565b600061339761339284613344565b613329565b9050828152602081018484840111156133b3576133b26132c4565b5b6133be848285613375565b509392505050565b600082601f8301126133db576133da613212565b5b81356133eb848260208601613384565b91505092915050565b60006020828403121561340a57613409612b78565b5b600082013567ffffffffffffffff81111561342857613427612b7d565b5b613434848285016133c6565b91505092915050565b60008060006060848603121561345657613455612b78565b5b600061346486828701612bcb565b935050602061347586828701612bcb565b925050604061348686828701612bcb565b9150509250925092565b61349981612d4e565b82525050565b60006020820190506134b46000830184613490565b92915050565b600067ffffffffffffffff8211156134d5576134d46132c9565b5b6134de82612c9f565b9050602081019050919050565b60006134fe6134f9846134ba565b613329565b90508281526020810184848401111561351a576135196132c4565b5b613525848285613375565b509392505050565b600082601f83011261354257613541613212565b5b81356135528482602086016134eb565b91505092915050565b60006020828403121561357157613570612b78565b5b600082013567ffffffffffffffff81111561358f5761358e612b7d565b5b61359b8482850161352d565b91505092915050565b6135ad81613110565b82525050565b600081519050919050565b600082825260208201905092915050565b60006135da826135b3565b6135e481856135be565b93506135f4818560208601612c6c565b6135fd81612c9f565b840191505092915050565b600060408201905061361d60008301856135a4565b818103602083015261362f81846135cf565b90509392505050565b6002811061364957613648612cf8565b5b50565b600081905061365a82613638565b919050565b600061366a8261364c565b9050919050565b61367a8161365f565b82525050565b60006020820190506136956000830184613671565b92915050565b600080604083850312156136b2576136b1612b78565b5b60006136c085828601612bcb565b92505060206136d18582860161300c565b9150509250929050565b600067ffffffffffffffff8211156136f6576136f56132c9565b5b602082029050602081019050919050565b600061371a613715846136db565b613329565b9050808382526020820190506020840283018581111561373d5761373c61321c565b5b835b8181101561378457803567ffffffffffffffff81111561376257613761613212565b5b80860161376f89826133c6565b8552602085019450505060208101905061373f565b5050509392505050565b600082601f8301126137a3576137a2613212565b5b81356137b3848260208601613707565b91505092915050565b6137c581613110565b81146137d057600080fd5b50565b6000813590506137e2816137bc565b92915050565b600080600080600080600080610100898b03121561380957613808612b78565b5b60006138178b828c0161300c565b985050602089013567ffffffffffffffff81111561383857613837612b7d565b5b6138448b828c016133c6565b975050604089013567ffffffffffffffff81111561386557613864612b7d565b5b6138718b828c016133c6565b965050606089013567ffffffffffffffff81111561389257613891612b7d565b5b61389e8b828c0161378e565b95505060806138af8b828c0161300c565b94505060a06138c08b828c0161300c565b93505060c06138d18b828c016137d3565b92505060e089013567ffffffffffffffff8111156138f2576138f1612b7d565b5b6138fe8b828c0161378e565b9150509295985092959890939650565b600061391982612b82565b9050919050565b6139298161390e565b82525050565b60006020820190506139446000830184613920565b92915050565b600060c08201905061395f6000830189612c17565b81810360208301526139718188612ec9565b905081810360408301526139858187612ec9565b90506139946060830186612c17565b6139a16080830185612c17565b6139ae60a08301846135a4565b979650505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006139ef601f83612eb8565b91506139fa826139b9565b602082019050919050565b60006020820190508181036000830152613a1e816139e2565b9050919050565b6000604082019050613a3a6000830185612c17565b613a476020830184612c17565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613a9557607f821691505b60208210811415613aa957613aa8613a4e565b5b50919050565b613ab881612ba2565b82525050565b6000602082019050613ad36000830184613aaf565b92915050565b600081519050613ae881612ff5565b92915050565b600060208284031215613b0457613b03612b78565b5b6000613b1284828501613ad9565b91505092915050565b7f6e6f2066756e6473000000000000000000000000000000000000000000000000600082015250565b6000613b51600883612eb8565b9150613b5c82613b1b565b602082019050919050565b60006020820190508181036000830152613b8081613b44565b9050919050565b60008190508160005260206000209050919050565b60008154613ba981613a7d565b613bb38186612eb8565b94506001821660008114613bce5760018114613be057613c13565b60ff1983168652602086019350613c13565b613be985613b87565b60005b83811015613c0b57815481890152600182019150602081019050613bec565b808801955050505b50505092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000613c526002836135be565b9150613c5d82613c1c565b602082019050919050565b6000819050919050565b600063ffffffff82169050919050565b6000819050919050565b6000613ca7613ca2613c9d84613c68565b613c82565b613c72565b9050919050565b613cb781613c8c565b82525050565b6000613cd8613cd3613cce84612b82565b613c82565b612b82565b9050919050565b6000613cea82613cbd565b9050919050565b6000613cfc82613cdf565b9050919050565b613d0c81613cf1565b82525050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b6000613d4f613d4a613d4584613d12565b613c82565b613d1c565b9050919050565b613d5f81613d34565b82525050565b6000610100820190508181036000830152613d808188613b9c565b90508181036020830152613d9381613c45565b9050613da26040830187613aaf565b613daf6060830186613cae565b613dbc6080830185613d03565b81810360a0830152613dcd81613c45565b905081810360c0830152613de081613c45565b9050613def60e0830184613d56565b9695505050505050565b600081905092915050565b50565b6000613e14600083613df9565b9150613e1f82613e04565b600082019050919050565b6000613e3582613e07565b9150819050919050565b6000604082019050613e546000830185613d03565b613e616020830184613aaf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ea282612c0d565b9150613ead83612c0d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ee257613ee1613e68565b5b828201905092915050565b6000613ef882612c0d565b9150613f0383612c0d565b925082821015613f1657613f15613e68565b5b82820390509291505056fea2646970667358221220e3d1928ec6ba71322a1cd5cc734b20f2aab496b10d890e1c5c141c727500846164736f6c63430008080033a2646970667358221220bef9dce703023072236e84d5a7039adacbc53dac6b65174d301b1d1f35d398f464736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Crf_DonF()": [
        {
          "notice": "cmp still active "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1658,
        "contract": "contracts/CrowdFunder.sol:CrowdFunder",
        "label": "campaignCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1663,
        "contract": "contracts/CrowdFunder.sol:CrowdFunder",
        "label": "campaigns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(Campaign)1584)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Campaign)1584": {
        "encoding": "inplace",
        "label": "contract Campaign",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(Campaign)1584)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Campaign)",
        "numberOfBytes": "32",
        "value": "t_contract(Campaign)1584"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
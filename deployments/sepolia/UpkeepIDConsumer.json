{
  "address": "0x6e3015e7ec7c50383391b4D2A0d0256a8a7f1B6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "encryptedEmail",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "upkeepContract",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "offchainConfig",
          "type": "bytes"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "registerAndPredictID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb83e8b67ed69406e33ecc95720aae3b4a087d5370f03af72265d539993298fa0",
  "receipt": {
    "to": null,
    "from": "0x1B1a51d1bbF42FEE2a93B230866344F50B271109",
    "contractAddress": "0x6e3015e7ec7c50383391b4D2A0d0256a8a7f1B6b",
    "transactionIndex": 11,
    "gasUsed": "1199740",
    "logsBloom": "0x
    "blockHash": "0xaa471cd5673dfc0d1b4fa2301d05395b6f482fe4065bb04329491c130d4d6273",
    "transactionHash": "0xb83e8b67ed69406e33ecc95720aae3b4a087d5370f03af72265d539993298fa0",
    "logs": [],
    "blockNumber": 3324827,
    "cumulativeGasUsed": "5440674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x779877A7B0D9E8603169DdbD7836e478b4624789",
    "0x9a811502d843E5a03913d5A2cfb646c11463467A",
    "0xE16Df59B887e3Caa439E0b29B42bA2e7976FD8b2"
  ],
  "numDeployments": 1,
  "solcInputHash": "e70c857d1ab8d94d4d5d76abd155e31f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"registerAndPredictID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UpkeepIDConsumer.sol\":\"UpkeepIDConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice OnchainConfig of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct OnchainConfig {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint32 maxCheckDataSize;\\n  uint32 maxPerformDataSize;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member totalPremium the total premium collected on registry so far\\n * @member numUpkeeps total number of upkeeps on the registry\\n * @member configCount ordinal number of current config, out of all configs applied to this contract so far\\n * @member latestConfigBlockNumber last block at which this config was set\\n * @member latestConfigDigest domain-separation tag for current config\\n * @member latestEpoch for which a report was transmitted\\n * @member paused freeze on execution scoped to the entire registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint96 totalPremium;\\n  uint256 numUpkeeps;\\n  uint32 configCount;\\n  uint32 latestConfigBlockNumber;\\n  bytes32 latestConfigDigest;\\n  uint32 latestEpoch;\\n  bool paused;\\n}\\n\\n/**\\n * @notice all information about an upkeep\\n * @dev only used in return values\\n * @member target the contract which needs to be serviced\\n * @member executeGas the gas limit of upkeep execution\\n * @member checkData the checkData bytes for this upkeep\\n * @member balance the balance of this upkeep\\n * @member admin for this upkeep\\n * @member maxValidBlocknumber until which block this upkeep is valid\\n * @member lastPerformBlockNumber the last block number when this upkeep was performed\\n * @member amountSpent the amount this upkeep has spent\\n * @member paused if this upkeep has been paused\\n * @member skipSigVerification skip signature verification in transmit for a low security low cost model\\n */\\nstruct UpkeepInfo {\\n  address target;\\n  uint32 executeGas;\\n  bytes checkData;\\n  uint96 balance;\\n  address admin;\\n  uint64 maxValidBlocknumber;\\n  uint32 lastPerformBlockNumber;\\n  uint96 amountSpent;\\n  bool paused;\\n  bytes offchainConfig;\\n}\\n\\nenum UpkeepFailureReason {\\n  NONE,\\n  UPKEEP_CANCELLED,\\n  UPKEEP_PAUSED,\\n  TARGET_CHECK_REVERTED,\\n  UPKEEP_NOT_NEEDED,\\n  PERFORM_DATA_EXCEEDS_LIMIT,\\n  INSUFFICIENT_BALANCE\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData,\\n    bytes calldata offchainConfig\\n  ) external returns (uint256 id);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function pauseUpkeep(uint256 id) external;\\n\\n  function unpauseUpkeep(uint256 id) external;\\n\\n  function transferUpkeepAdmin(uint256 id, address proposed) external;\\n\\n  function acceptUpkeepAdmin(uint256 id) external;\\n\\n  function updateCheckData(uint256 id, bytes calldata newCheckData) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function setUpkeepOffchainConfig(uint256 id, bytes calldata config) external;\\n\\n  function getUpkeep(uint256 id) external view returns (UpkeepInfo memory upkeepInfo);\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getTransmitterInfo(address query)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      uint8 index,\\n      uint96 balance,\\n      uint96 lastCollected,\\n      address payee\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory state,\\n      OnchainConfig memory config,\\n      address[] memory signers,\\n      address[] memory transmitters,\\n      uint8 f\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    view\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\",\"keccak256\":\"0x9faf0551509440bd9c25a4a2f14b23bce2f82e5ab5691058b9664edab808468c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"contracts/UpkeepIDConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n// UpkeepIDConsumerExample.sol imports functions from both ./AutomationRegistryInterface2_0.sol and\\r\\n// ./interfaces/LinkTokenInterface.sol\\r\\n\\r\\nimport {AutomationRegistryInterface, State, OnchainConfig} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\r\\n * DO NOT USE THIS CODE IN PRODUCTION.\\r\\n */\\r\\n\\r\\ninterface KeeperRegistrarInterface {\\r\\n    function register(\\r\\n        string memory name,\\r\\n        bytes calldata encryptedEmail,\\r\\n        address upkeepContract,\\r\\n        uint32 gasLimit,\\r\\n        address adminAddress,\\r\\n        bytes calldata checkData,\\r\\n        bytes calldata offchainConfig,\\r\\n        uint96 amount,\\r\\n        address sender\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract UpkeepIDConsumer {\\r\\n    LinkTokenInterface public immutable i_link;\\r\\n    address public immutable registrar;\\r\\n    AutomationRegistryInterface public immutable i_registry;\\r\\n    bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\r\\n\\r\\n    constructor(\\r\\n        LinkTokenInterface _link,\\r\\n        address _registrar,\\r\\n        AutomationRegistryInterface _registry\\r\\n    ) {\\r\\n        i_link = _link;\\r\\n        registrar = _registrar;\\r\\n        i_registry = _registry;\\r\\n    }\\r\\n\\r\\n    function registerAndPredictID(\\r\\n        string memory name,\\r\\n        bytes calldata encryptedEmail,\\r\\n        address upkeepContract,\\r\\n        uint32 gasLimit,\\r\\n        address adminAddress,\\r\\n        bytes calldata checkData,\\r\\n        bytes calldata offchainConfig,\\r\\n        uint96 amount\\r\\n    ) public returns(uint256) {\\r\\n        (State memory state, , , , ) = i_registry.getState();\\r\\n        uint256 oldNonce = state.nonce;\\r\\n        bytes memory payload = abi.encode(\\r\\n            name,\\r\\n            encryptedEmail,\\r\\n            upkeepContract,\\r\\n            gasLimit,\\r\\n            adminAddress,\\r\\n            checkData,\\r\\n            offchainConfig,\\r\\n            amount,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        i_link.transferAndCall(\\r\\n            registrar,\\r\\n            amount,\\r\\n            bytes.concat(registerSig, payload)\\r\\n        );\\r\\n        (state, , , , ) = i_registry.getState();\\r\\n        uint256 newNonce = state.nonce;\\r\\n        if (newNonce == oldNonce + 1) {\\r\\n            uint256 upkeepID = uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        blockhash(block.number - 1),\\r\\n                        address(i_registry),\\r\\n                        uint32(oldNonce)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n            // DEV - Use the upkeepID however you see fit\\r\\n            return upkeepID;\\r\\n        } else {\\r\\n            revert(\\\"auto-approve disabled\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1712d2ac002e57e74e5367f9a88c9466f935fada95bd9ad98111e434110f0b3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405263a611ea5660e01b6000806101000a81548163ffffffff021916908360e01c02179055503480156200003557600080fd5b50604051620016e8380380620016e883398181016040528101906200005b9190620001fd565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000259565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013b826200010e565b9050919050565b60006200014f826200012e565b9050919050565b620001618162000142565b81146200016d57600080fd5b50565b600081519050620001818162000156565b92915050565b62000192816200012e565b81146200019e57600080fd5b50565b600081519050620001b28162000187565b92915050565b6000620001c5826200012e565b9050919050565b620001d781620001b8565b8114620001e357600080fd5b50565b600081519050620001f781620001cc565b92915050565b60008060006060848603121562000219576200021862000109565b5b6000620002298682870162000170565b93505060206200023c86828701620001a1565b92505060406200024f86828701620001e6565b9150509250925092565b60805160601c60a05160601c60c05160601c611434620002b46000396000818160dd015281816101280152818161031801526103fc015260008181610101015261025601526000818161021a01526104a201526114346000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632a663606146100515780632b20e3971461006f5780634c7e9be31461008d5780637d253aff146100bd575b600080fd5b6100596100db565b6040516100669190610543565b60405180910390f35b6100776100ff565b604051610084919061057f565b60405180910390f35b6100a760048036038101906100a29190610800565b610123565b6040516100b4919061094d565b60405180910390f35b6100c56104a0565b6040516100d29190610989565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018c57600080fd5b505afa1580156101a0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101c99190610e21565b5050505090506000816000015163ffffffff16905060008e8e8e8e8e8e8e8e8e8e8e306040516020016102079c9b9a99989796959493929190610fbd565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008760008054906101000a900460e01b85604051602001610296929190611100565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016102c393929190611192565b602060405180830381600087803b1580156102dd57600080fd5b505af11580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031591906111d0565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561037c57600080fd5b505afa158015610390573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103b99190610e21565b90919250909150905050809350506000836000015163ffffffff1690506001836103e3919061122c565b8114156104565760006001436103f99190611282565b407f00000000000000000000000000000000000000000000000000000000000000008560405160200161042e93929190611355565b6040516020818303038152906040528051906020012060001c90508095505050505050610491565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610488906113de565b60405180910390fd5b9b9a5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105096105046104ff846104c4565b6104e4565b6104c4565b9050919050565b600061051b826104ee565b9050919050565b600061052d82610510565b9050919050565b61053d81610522565b82525050565b60006020820190506105586000830184610534565b92915050565b6000610569826104c4565b9050919050565b6105798161055e565b82525050565b60006020820190506105946000830184610570565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610601826105b8565b810181811067ffffffffffffffff821117156106205761061f6105c9565b5b80604052505050565b600061063361059a565b905061063f82826105f8565b919050565b600067ffffffffffffffff82111561065f5761065e6105c9565b5b610668826105b8565b9050602081019050919050565b82818337600083830152505050565b600061069761069284610644565b610629565b9050828152602081018484840111156106b3576106b26105b3565b5b6106be848285610675565b509392505050565b600082601f8301126106db576106da6105ae565b5b81356106eb848260208601610684565b91505092915050565b600080fd5b600080fd5b60008083601f840112610714576107136105ae565b5b8235905067ffffffffffffffff811115610731576107306106f4565b5b60208301915083600182028301111561074d5761074c6106f9565b5b9250929050565b61075d8161055e565b811461076857600080fd5b50565b60008135905061077a81610754565b92915050565b600063ffffffff82169050919050565b61079981610780565b81146107a457600080fd5b50565b6000813590506107b681610790565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6107dd816107bc565b81146107e857600080fd5b50565b6000813590506107fa816107d4565b92915050565b60008060008060008060008060008060006101008c8e031215610826576108256105a4565b5b60008c013567ffffffffffffffff811115610844576108436105a9565b5b6108508e828f016106c6565b9b505060208c013567ffffffffffffffff811115610871576108706105a9565b5b61087d8e828f016106fe565b9a509a505060406108908e828f0161076b565b98505060606108a18e828f016107a7565b97505060806108b28e828f0161076b565b96505060a08c013567ffffffffffffffff8111156108d3576108d26105a9565b5b6108df8e828f016106fe565b955095505060c08c013567ffffffffffffffff811115610902576109016105a9565b5b61090e8e828f016106fe565b935093505060e06109218e828f016107eb565b9150509295989b509295989b9093969950565b6000819050919050565b61094781610934565b82525050565b6000602082019050610962600083018461093e565b92915050565b600061097382610510565b9050919050565b61098381610968565b82525050565b600060208201905061099e600083018461097a565b92915050565b600080fd5b6000815190506109b881610790565b92915050565b6000815190506109cd816107d4565b92915050565b6109dc81610934565b81146109e757600080fd5b50565b6000815190506109f9816109d3565b92915050565b6000819050919050565b610a12816109ff565b8114610a1d57600080fd5b50565b600081519050610a2f81610a09565b92915050565b60008115159050919050565b610a4a81610a35565b8114610a5557600080fd5b50565b600081519050610a6781610a41565b92915050565b60006101408284031215610a8457610a836109a4565b5b610a8f610140610629565b90506000610a9f848285016109a9565b6000830152506020610ab3848285016109be565b6020830152506040610ac7848285016109ea565b6040830152506060610adb848285016109be565b6060830152506080610aef848285016109ea565b60808301525060a0610b03848285016109a9565b60a08301525060c0610b17848285016109a9565b60c08301525060e0610b2b84828501610a20565b60e083015250610100610b40848285016109a9565b61010083015250610120610b5684828501610a58565b6101208301525092915050565b600062ffffff82169050919050565b610b7b81610b63565b8114610b8657600080fd5b50565b600081519050610b9881610b72565b92915050565b600061ffff82169050919050565b610bb581610b9e565b8114610bc057600080fd5b50565b600081519050610bd281610bac565b92915050565b600081519050610be781610754565b92915050565b60006101a08284031215610c0457610c036109a4565b5b610c0f6101a0610629565b90506000610c1f848285016109a9565b6000830152506020610c33848285016109a9565b6020830152506040610c47848285016109a9565b6040830152506060610c5b84828501610b89565b6060830152506080610c6f84828501610bc3565b60808301525060a0610c83848285016109be565b60a08301525060c0610c97848285016109a9565b60c08301525060e0610cab848285016109a9565b60e083015250610100610cc0848285016109a9565b61010083015250610120610cd6848285016109ea565b61012083015250610140610cec848285016109ea565b61014083015250610160610d0284828501610bd8565b61016083015250610180610d1884828501610bd8565b6101808301525092915050565b600067ffffffffffffffff821115610d4057610d3f6105c9565b5b602082029050602081019050919050565b6000610d64610d5f84610d25565b610629565b90508083825260208201905060208402830185811115610d8757610d866106f9565b5b835b81811015610db05780610d9c8882610bd8565b845260208401935050602081019050610d89565b5050509392505050565b600082601f830112610dcf57610dce6105ae565b5b8151610ddf848260208601610d51565b91505092915050565b600060ff82169050919050565b610dfe81610de8565b8114610e0957600080fd5b50565b600081519050610e1b81610df5565b92915050565b60008060008060006103408688031215610e3e57610e3d6105a4565b5b6000610e4c88828901610a6d565b955050610140610e5e88828901610bed565b9450506102e086015167ffffffffffffffff811115610e8057610e7f6105a9565b5b610e8c88828901610dba565b93505061030086015167ffffffffffffffff811115610eae57610ead6105a9565b5b610eba88828901610dba565b925050610320610ecc88828901610e0c565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f13578082015181840152602081019050610ef8565b83811115610f22576000848401525b50505050565b6000610f3382610ed9565b610f3d8185610ee4565b9350610f4d818560208601610ef5565b610f56816105b8565b840191505092915050565b600082825260208201905092915050565b6000610f7e8385610f61565b9350610f8b838584610675565b610f94836105b8565b840190509392505050565b610fa881610780565b82525050565b610fb7816107bc565b82525050565b6000610120820190508181036000830152610fd8818f610f28565b90508181036020830152610fed818d8f610f72565b9050610ffc604083018c610570565b611009606083018b610f9f565b611016608083018a610570565b81810360a083015261102981888a610f72565b905081810360c083015261103e818688610f72565b905061104d60e0830185610fae565b61105b610100830184610570565b9d9c50505050505050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6110b36110ae8261106c565b611098565b82525050565b600081519050919050565b600081905092915050565b60006110da826110b9565b6110e481856110c4565b93506110f4818560208601610ef5565b80840191505092915050565b600061110c82856110a2565b60048201915061111c82846110cf565b91508190509392505050565b600061114361113e611139846107bc565b6104e4565b610934565b9050919050565b61115381611128565b82525050565b6000611164826110b9565b61116e8185610f61565b935061117e818560208601610ef5565b611187816105b8565b840191505092915050565b60006060820190506111a76000830186610570565b6111b4602083018561114a565b81810360408301526111c68184611159565b9050949350505050565b6000602082840312156111e6576111e56105a4565b5b60006111f484828501610a58565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123782610934565b915061124283610934565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611277576112766111fd565b5b828201905092915050565b600061128d82610934565b915061129883610934565b9250828210156112ab576112aa6111fd565b5b828203905092915050565b6000819050919050565b6112d16112cc826109ff565b6112b6565b82525050565b60008160601b9050919050565b60006112ef826112d7565b9050919050565b6000611301826112e4565b9050919050565b6113196113148261055e565b6112f6565b82525050565b60008160e01b9050919050565b60006113378261131f565b9050919050565b61134f61134a82610780565b61132c565b82525050565b600061136182866112c0565b6020820191506113718285611308565b601482019150611381828461133e565b600482019150819050949350505050565b7f6175746f2d617070726f76652064697361626c65640000000000000000000000600082015250565b60006113c8601583610ee4565b91506113d382611392565b602082019050919050565b600060208201905081810360008301526113f7816113bb565b905091905056fea26469706673582212205b5e961bdc6a4ad94d10dc96294876fa745410bceb4a192cb8260279fc77aa4864736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1851,
        "contract": "contracts/UpkeepIDConsumer.sol:UpkeepIDConsumer",
        "label": "registerSig",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes4"
      }
    ],
    "types": {
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      }
    }
  }
}
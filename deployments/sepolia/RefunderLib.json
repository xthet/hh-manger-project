{
  "address": "0xC9bDfa0822e14bcc54e68229C1EDb13539c43E46",
  "abi": [],
  "transactionHash": "0xf1d63f7ae11f20dafd2c59c899811a7c53e75f4ed2f1e15483ce7de9de66fdf3",
  "receipt": {
    "to": null,
    "from": "0x3f3c2A0AB4E3c081979FaCB10Bf3c9E1A4DB44A3",
    "contractAddress": "0xC9bDfa0822e14bcc54e68229C1EDb13539c43E46",
    "transactionIndex": 74,
    "gasUsed": "315665",
    "logsBloom": "0x
    "blockHash": "0x9308a0604877975aa8301cddc59fb15324f54f339c88eeadb6c5cfbabe09006c",
    "transactionHash": "0xf1d63f7ae11f20dafd2c59c899811a7c53e75f4ed2f1e15483ce7de9de66fdf3",
    "logs": [],
    "blockNumber": 3634550,
    "cumulativeGasUsed": "6135992",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d728c752d0773b76f850663011342c47",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/campaign/RefunderLib.sol\":\"RefunderLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport { Reward } from \\\"./Reward.sol\\\";\\r\\nimport { RewardFactory } from \\\"./factories/RewardFactory.sol\\\";\\r\\nimport { RefunderLib } from \\\"./libraries/campaign/RefunderLib.sol\\\";\\r\\n\\r\\n// errors\\r\\n// error Cmp_NIS(); /**not in state */\\r\\n// error Cmp_NotCrtr();\\r\\n// error Cmp_DIC(); /**donator is creator */\\r\\n// error Cmp_NoDns();\\r\\n// error Cmp_RefF();\\r\\n// error Cmp_UpkNN();\\r\\n// error Cmp_NotRef();\\r\\n// error Cmp_Bankrupt();\\r\\n\\r\\ncontract Campaign is KeeperCompatibleInterface, ReentrancyGuard{\\r\\n\\r\\n  // enums\\r\\n  enum C_State {\\r\\n    Fundraising,\\r\\n    Expired,\\r\\n    Canceled\\r\\n  }\\r\\n\\r\\n  // c_state variables\\r\\n  address immutable public i_crf;\\r\\n  address payable immutable public i_creator;\\r\\n  address immutable public i_rwdFactory;\\r\\n  string public s_title;\\r\\n  string public s_description;\\r\\n  string public s_category;\\r\\n  string public s_imageURI;\\r\\n  string public s_campaignURI;\\r\\n  string public s_tags;\\r\\n  uint256 public goalAmount;\\r\\n  uint256 public duration;\\r\\n  uint256 public currentBalance;\\r\\n  uint256 private immutable i_initTimeStamp;\\r\\n  uint256 private constant i_maxDur = 5184000;\\r\\n  uint256 public deadline;\\r\\n  uint256 private rId;\\r\\n  C_State public c_state = C_State.Fundraising; // default c_state\\r\\n\\r\\n  struct CampaignObject {\\r\\n    address i_creator;\\r\\n    string s_title;\\r\\n    string s_description;\\r\\n    string s_category;\\r\\n    string s_tags;\\r\\n    uint256 goalAmount;\\r\\n    uint256 duration;\\r\\n    uint256 currentBalance;\\r\\n    C_State currentC_State;\\r\\n    string s_imageURI;\\r\\n    string s_campaignURI;\\r\\n    uint256 deadline;\\r\\n  }\\r\\n\\r\\n  struct refunder_pckg {\\r\\n    uint256 currentBalance;\\r\\n    C_State c_state;\\r\\n  }\\r\\n\\r\\n  // mapping (uint256 => reward) public rewards;\\r\\n  mapping (uint256 => address) public rewards;\\r\\n  mapping (address => uint256[]) public entDonations;\\r\\n  mapping (address => uint256) public aggrDonations;\\r\\n\\r\\n  uint256[] public rKeys;\\r\\n\\r\\n  // events\\r\\n  event FundingRecieved (\\r\\n    address indexed contributor,\\r\\n    uint256 amount,\\r\\n    uint256 currentBalance\\r\\n  );\\r\\n  event CreatorPaid(address creator, address campaignAddress);\\r\\n  event CampaignExpired(address campaignAddress);\\r\\n  event CampaignCanceled();\\r\\n\\r\\n  // modifiers\\r\\n  modifier isCreator() {\\r\\n    if(msg.sender != i_creator){revert();}\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  refunder_pckg _refP;\\r\\n\\r\\n  constructor (\\r\\n    address _crowdfunder,\\r\\n    address _creator,\\r\\n    address _rwdFactory,\\r\\n    string memory _title,\\r\\n    string memory _description,\\r\\n    string memory _category,\\r\\n    string memory _tags,\\r\\n    uint256 _goalAmount,\\r\\n    uint256 _duration,\\r\\n    string memory _imageURI\\r\\n  ) {\\r\\n    i_rwdFactory = _rwdFactory;\\r\\n    i_crf = _crowdfunder;\\r\\n    i_creator = payable(_creator);\\r\\n    s_title = _title;\\r\\n    s_description = _description;\\r\\n    s_category = _category;\\r\\n    s_tags = _tags;\\r\\n    goalAmount = _goalAmount;\\r\\n    i_initTimeStamp = block.timestamp;\\r\\n    duration = _duration > i_maxDur ? i_maxDur : _duration;\\r\\n    deadline = i_initTimeStamp + duration;\\r\\n    s_imageURI = _imageURI;\\r\\n    currentBalance = 0;\\r\\n  }\\r\\n\\r\\n\\r\\n  function donate(address _donator, bool _rewardable) public payable nonReentrant{\\r\\n    if(msg.sender != i_crf){revert();}\\r\\n    if(c_state != C_State.Fundraising){revert();}\\r\\n    if(_donator == i_creator){revert();}\\r\\n    currentBalance = currentBalance + msg.value;\\r\\n    if(_rewardable){\\r\\n      if(rewards[msg.value] != address(0)){\\r\\n        (bool success, ) = rewards[msg.value].call(abi.encodeWithSignature(\\\"addDonator(address)\\\", _donator));\\r\\n        if(!success){revert();}\\r\\n        entDonations[_donator].push(msg.value);\\r\\n      }else{revert();}\\r\\n    }\\r\\n    aggrDonations[_donator] = aggrDonations[_donator] + msg.value; \\r\\n    emit FundingRecieved(_donator, msg.value, currentBalance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    @dev this is the function chainlink keepers calls\\r\\n    chekupkeep returns true to trigger the action after the interval has passed\\r\\n   */\\r\\n  function checkUpkeep(bytes memory /**checkData */) public view override\\r\\n  returns (bool upkeepNeeded, bytes memory /**performData */) \\r\\n  {\\r\\n    bool isOpen = c_state == C_State.Fundraising;\\r\\n    bool timePassed = ((block.timestamp - i_initTimeStamp) > duration);\\r\\n    upkeepNeeded = (timePassed && isOpen);\\r\\n    return (upkeepNeeded, \\\"0x0\\\");\\r\\n  }\\r\\n\\r\\n  function performUpkeep(bytes calldata /**performData */) external override {\\r\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n    if(!upkeepNeeded){revert();}\\r\\n    c_state = C_State.Expired;\\r\\n    emit CampaignExpired(address(this));\\r\\n  }\\r\\n\\r\\n  function payout() external isCreator{\\r\\n    if(c_state != C_State.Expired){revert();}\\r\\n    uint256 totalRaised = currentBalance;\\r\\n    currentBalance = 0;\\r\\n    (bool success, ) = i_creator.call{value: totalRaised}(\\\"\\\");\\r\\n    if(success){\\r\\n      emit CreatorPaid(i_creator, address(this));\\r\\n    }\\r\\n    else{revert();}\\r\\n  }\\r\\n\\r\\n\\r\\n  function refund(address _donator) external nonReentrant{\\r\\n    _refP = refunder_pckg(currentBalance, c_state);\\r\\n    RefunderLib.refund(i_crf, _refP, rewards, aggrDonations, entDonations, _donator);\\r\\n  }\\r\\n\\r\\n  function makeReward(RewardFactory.rwdInput memory _rwd) external isCreator {\\r\\n    if(rewards[_rwd._price] != address(0)){revert();}\\r\\n    rKeys.push(_rwd._price);\\r\\n    address newReward = RewardFactory(i_rwdFactory).createReward(address(this), i_creator, _rwd);\\r\\n    rewards[_rwd._price] = newReward;\\r\\n  }\\r\\n\\r\\n  function endCampaign() external isCreator {\\r\\n    if(c_state == C_State.Expired){revert();}\\r\\n    c_state = C_State.Canceled;\\r\\n    emit CampaignCanceled();\\r\\n  }\\r\\n\\r\\n  // update functions\\r\\n  function updateCampaignURI(string memory _campaignURI) external isCreator {\\r\\n    s_campaignURI = _campaignURI;\\r\\n  }\\r\\n\\r\\n  function updateDur(uint256 _addedDur) external isCreator {\\r\\n    duration = (((duration + _addedDur)) > i_maxDur) ? i_maxDur : (duration + _addedDur);\\r\\n    deadline = i_initTimeStamp + duration;\\r\\n  }\\r\\n\\r\\n  // getter functions\\r\\n  function getRewardKeys() external view returns(uint256[] memory){\\r\\n    return rKeys;\\r\\n  }\\r\\n  \\r\\n  function getReward(uint256 _priceID) external view returns(Reward.RewardObject memory) {\\r\\n    Reward reward = Reward(rewards[_priceID]);\\r\\n    return reward.getRewardDetails();\\r\\n  }\\r\\n\\r\\n  function getCampaignDetails() external view returns(CampaignObject memory) {\\r\\n    return CampaignObject(\\r\\n      i_creator,\\r\\n      s_title, \\r\\n      s_description,\\r\\n      s_category,\\r\\n      s_tags,\\r\\n      goalAmount,\\r\\n      duration,\\r\\n      currentBalance,\\r\\n      c_state,\\r\\n      s_imageURI,\\r\\n      s_campaignURI,\\r\\n      deadline\\r\\n    );\\r\\n  }\\r\\n}\",\"keccak256\":\"0xba4854907f5316e4e515f78099f50c65545c9a72971d15b7a6cdc607a93f548f\",\"license\":\"MIT\"},\"contracts/Reward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract Reward {\\r\\n  address public immutable i_campaignAddress;\\r\\n  // address public immutable i_crf;\\r\\n  address public immutable i_creator;\\r\\n\\r\\n  uint256 public immutable i_price;\\r\\n  string public title;\\r\\n  string public description;\\r\\n  string public rpic;\\r\\n  string[] public perks;\\r\\n  uint256 public delDate;\\r\\n  uint256 public quantity;\\r\\n  bool public infinite = true;\\r\\n  string[] public shipsTo;\\r\\n  address[] public donators;\\r\\n  string public surveyLink;\\r\\n\\r\\n  struct RewardObject {\\r\\n    uint256 price;\\r\\n    string title;\\r\\n    string description;\\r\\n    string rpic;\\r\\n    string[] perks;\\r\\n    uint256 delDate;\\r\\n    uint256 quantity;\\r\\n    bool infinite;\\r\\n    string[] shipsTo;\\r\\n    address[] donators;\\r\\n    string surveyLink;\\r\\n  }\\r\\n\\r\\n  mapping (address => uint256) public true_donator;  \\r\\n  mapping (address => string) public surveyResponses;\\r\\n\\r\\n  constructor ( \\r\\n    address _campaignAddress, \\r\\n    address _creator,\\r\\n    uint256 _price, \\r\\n    string memory _title, \\r\\n    string memory _description, \\r\\n    string memory _rpic,\\r\\n    string[] memory _perks, \\r\\n    uint256 _deadline, \\r\\n    uint256 _quantity, \\r\\n    bool _infinite, \\r\\n    string[] memory _shipsTo\\r\\n    ) {\\r\\n    i_price = _price;\\r\\n    i_campaignAddress = _campaignAddress;\\r\\n    i_creator = _creator;\\r\\n\\r\\n    title = _title;\\r\\n    description = _description;\\r\\n    rpic = _rpic;\\r\\n    perks = _perks;\\r\\n    delDate = _deadline;\\r\\n    quantity = _quantity;\\r\\n    infinite = _infinite;\\r\\n    shipsTo = _shipsTo;\\r\\n  }\\r\\n\\r\\n  function updateSurveyLink(string memory _surveylink) external {\\r\\n    if(msg.sender != i_creator){revert();}\\r\\n    surveyLink = _surveylink;\\r\\n  }\\r\\n\\r\\n  function addDonator(address _donator) external {\\r\\n    if(msg.sender != i_campaignAddress){revert();}\\r\\n    if((true_donator[_donator] > 0)){revert();} // already has id ...has therefor donated for this reward before\\r\\n\\r\\n    if(!infinite){\\r\\n      if(quantity > 0){\\r\\n        quantity = quantity - 1;\\r\\n        uint256 currNo = donators.length; // get array length\\r\\n        true_donator[_donator] = currNo + 1; \\r\\n        donators.push(_donator);\\r\\n      }else{revert();} // rwd has finished no longer available\\r\\n    }else{\\r\\n      uint256 currNo = donators.length; // get array length\\r\\n      true_donator[_donator] = currNo + 1; \\r\\n      donators.push(_donator);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getDonators() external view returns(address[] memory){\\r\\n    return donators;\\r\\n  }\\r\\n\\r\\n  function removeDonator(address _donator) external {\\r\\n    if(msg.sender != i_campaignAddress){revert();}\\r\\n    if(!(true_donator[_donator] > 0)){revert();} // not a donator\\r\\n    uint256 index = true_donator[_donator] - 1;\\r\\n    delete donators[index];\\r\\n    delete true_donator[_donator];\\r\\n  }\\r\\n\\r\\n  function respondToSurvey(string memory _response) external {\\r\\n    if(!(true_donator[msg.sender] > 0)){revert();} // not a donator\\r\\n    surveyResponses[msg.sender] = _response;\\r\\n  }\\r\\n\\r\\n  function getRewardDetails() external view returns(RewardObject memory){\\r\\n    return RewardObject(\\r\\n      i_price,\\r\\n      title,\\r\\n      description,\\r\\n      rpic,\\r\\n      perks,\\r\\n      delDate,\\r\\n      quantity,\\r\\n      infinite,\\r\\n      shipsTo,\\r\\n      donators,\\r\\n      surveyLink\\r\\n    );\\r\\n  }\\r\\n}\",\"keccak256\":\"0x16520b0d7ec2ca2e9c34cc0738e1db48661eef392ca464f8b0ee003169d06603\",\"license\":\"MIT\"},\"contracts/factories/RewardFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { Reward } from \\\"../Reward.sol\\\";\\r\\n\\r\\ncontract RewardFactory {\\r\\n  struct rwdInput {\\r\\n    uint256 _price;\\r\\n    string  _title; \\r\\n    string  _description; \\r\\n    string  _rpic;\\r\\n    string[]  _perks; \\r\\n    uint256 _deadline; \\r\\n    uint256 _quantity; \\r\\n    bool _infinite; \\r\\n    string[]  _shipsTo;\\r\\n  }\\r\\n\\r\\n  function createReward(address _cmpAddress, address _creator, rwdInput memory _rwd) public returns (address) {\\r\\n    Reward rwd = new Reward(\\r\\n      _cmpAddress, \\r\\n      _creator,\\r\\n      _rwd._price,\\r\\n      _rwd._title,\\r\\n      _rwd._description,\\r\\n      _rwd._rpic,\\r\\n      _rwd._perks,\\r\\n      _rwd._deadline,\\r\\n      _rwd._quantity,\\r\\n      _rwd._infinite,\\r\\n      _rwd._shipsTo \\r\\n    );\\r\\n\\r\\n    return address(rwd);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x025667572f11f51d96b92b058b304512b26a9394374f509ec337a822c2133729\",\"license\":\"MIT\"},\"contracts/libraries/campaign/RefunderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { Campaign } from \\\"../../Campaign.sol\\\";\\r\\nimport { Reward } from \\\"../../Reward.sol\\\";\\r\\n\\r\\nlibrary RefunderLib {\\r\\n  function refund (\\r\\n    address _i_crf,\\r\\n    Campaign.refunder_pckg storage _refP, \\r\\n    mapping (uint256 => address) storage _rewards, \\r\\n    mapping (address => uint256) storage _aggrDons, \\r\\n    mapping (address => uint256[]) storage _entDons, \\r\\n    address _donator\\r\\n    ) external {\\r\\n    if(msg.sender != _i_crf){revert();}\\r\\n    if(_refP.c_state == Campaign.C_State.Expired){revert();}\\r\\n    if(_aggrDons[_donator] == 0 ){revert();}\\r\\n\\r\\n    uint256 amountToRefund = _aggrDons[_donator];\\r\\n\\r\\n    if(_refP.currentBalance < amountToRefund){revert();}\\r\\n    _refP.currentBalance = _refP.currentBalance - amountToRefund;\\r\\n\\r\\n    (bool success, ) = payable(_donator).call{value: amountToRefund}(\\\"\\\");\\r\\n    if(!success){revert();}\\r\\n\\r\\n    delete _aggrDons[_donator];\\r\\n\\r\\n    if(_entDons[_donator].length > 0){    \\r\\n      for(uint i=0; i<_entDons[_donator].length; i++){\\r\\n        if(!(_rewards[_entDons[_donator][i]] != address(0))){\\r\\n          Reward(_rewards[_entDons[_donator][i]]).removeDonator(_donator);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    delete _entDons[_donator];\\r\\n  }\\r\\n}\",\"keccak256\":\"0xacea134a5959c86c7ca67a50b965a2ad2666dccf020c1e3d97b908a79937da03\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104bf61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80637314d79c1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610366565b61005c565b005b336001600160a01b0387161461007157600080fd5b60018086015460ff16600281111561008b5761008b6103f0565b141561009657600080fd5b6001600160a01b0381166000908152602084905260409020546100b857600080fd5b6001600160a01b03811660009081526020849052604090205485548111156100df57600080fd5b85546100ec90829061041c565b86556040516000906001600160a01b03841690839061010a90610433565b60006040518083038185875af1925050503d8060008114610147576040519150601f19603f3d011682016040523d82523d6000602084013e61014c565b606091505b505090508061015a57600080fd5b6001600160a01b03831660009081526020868152604080832083905590869052902054156102be5760005b6001600160a01b0384166000908152602086905260409020548110156102bc576001600160a01b0384166000908152602086905260408120805489918391859081106101d3576101d361043b565b600091825260208083209091015483528201929092526040019020546001600160a01b031614156102aa576001600160a01b03841660009081526020869052604081208054899291908490811061022c5761022c61043b565b60009182526020808320909101548352820192909252604090810190912054905163c91e986d60e01b81526001600160a01b039091169063c91e986d90610277908790600401610460565b600060405180830381600087803b15801561029157600080fd5b505af11580156102a5573d6000803e3d6000fd5b505050505b806102b48161046e565b915050610185565b505b6001600160a01b03831660009081526020859052604081206102df916102e9565b5050505050505050565b5080546000825590600052602060002090810190610307919061030a565b50565b5b8082111561031f576000815560010161030b565b5090565b60006001600160a01b0382165b92915050565b61033f81610323565b811461030757600080fd5b803561033081610336565b8061033f565b803561033081610355565b60008060008060008060c0878903121561038257610382600080fd5b600061038e898961034a565b965050602061039f89828a0161035b565b95505060406103b089828a0161035b565b94505060606103c189828a0161035b565b93505060806103d289828a0161035b565b92505060a06103e389828a0161034a565b9150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561042e5761042e610406565b500390565b600081610330565b634e487b7160e01b600052603260045260246000fd5b61045a81610323565b82525050565b602081016103308284610451565b600060001982141561048257610482610406565b506001019056fea2646970667358221220f70dda3cc8fff5365fce32d219e4fb54cbc47011e928b40b1ce2baa820163b8264736f6c634300080b0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80637314d79c1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610366565b61005c565b005b336001600160a01b0387161461007157600080fd5b60018086015460ff16600281111561008b5761008b6103f0565b141561009657600080fd5b6001600160a01b0381166000908152602084905260409020546100b857600080fd5b6001600160a01b03811660009081526020849052604090205485548111156100df57600080fd5b85546100ec90829061041c565b86556040516000906001600160a01b03841690839061010a90610433565b60006040518083038185875af1925050503d8060008114610147576040519150601f19603f3d011682016040523d82523d6000602084013e61014c565b606091505b505090508061015a57600080fd5b6001600160a01b03831660009081526020868152604080832083905590869052902054156102be5760005b6001600160a01b0384166000908152602086905260409020548110156102bc576001600160a01b0384166000908152602086905260408120805489918391859081106101d3576101d361043b565b600091825260208083209091015483528201929092526040019020546001600160a01b031614156102aa576001600160a01b03841660009081526020869052604081208054899291908490811061022c5761022c61043b565b60009182526020808320909101548352820192909252604090810190912054905163c91e986d60e01b81526001600160a01b039091169063c91e986d90610277908790600401610460565b600060405180830381600087803b15801561029157600080fd5b505af11580156102a5573d6000803e3d6000fd5b505050505b806102b48161046e565b915050610185565b505b6001600160a01b03831660009081526020859052604081206102df916102e9565b5050505050505050565b5080546000825590600052602060002090810190610307919061030a565b50565b5b8082111561031f576000815560010161030b565b5090565b60006001600160a01b0382165b92915050565b61033f81610323565b811461030757600080fd5b803561033081610336565b8061033f565b803561033081610355565b60008060008060008060c0878903121561038257610382600080fd5b600061038e898961034a565b965050602061039f89828a0161035b565b95505060406103b089828a0161035b565b94505060606103c189828a0161035b565b93505060806103d289828a0161035b565b92505060a06103e389828a0161034a565b9150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561042e5761042e610406565b500390565b600081610330565b634e487b7160e01b600052603260045260246000fd5b61045a81610323565b82525050565b602081016103308284610451565b600060001982141561048257610482610406565b506001019056fea2646970667358221220f70dda3cc8fff5365fce32d219e4fb54cbc47011e928b40b1ce2baa820163b8264736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
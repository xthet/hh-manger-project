{
  "address": "0xE8Db971CF3693154167431D389CA58d7D7917dC1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "encryptedEmail",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "upkeepContract",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint8",
          "name": "source",
          "type": "uint8"
        }
      ],
      "name": "registerAndPredictID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc473922fc6256e86efc9da44add6c160711138469016dc9d459dca4093f9bed7",
  "receipt": {
    "to": null,
    "from": "0x3DAe272A6C397F8dF15A4ACe05E38c23C1787Dca",
    "contractAddress": "0xE8Db971CF3693154167431D389CA58d7D7917dC1",
    "transactionIndex": 3,
    "gasUsed": "1134672",
    "logsBloom": "0x
    "blockHash": "0xd56486cacf9e9f56fdda12f3f70a6d85b8a3902d70d710f229d8a18fabacdb03",
    "transactionHash": "0xc473922fc6256e86efc9da44add6c160711138469016dc9d459dca4093f9bed7",
    "logs": [],
    "blockNumber": 20451093,
    "cumulativeGasUsed": "1733051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x57A4a13b35d25EE78e084168aBaC5ad360252467",
    "0xE16Df59B887e3Caa439E0b29B42bA2e7976FD8b2"
  ],
  "numDeployments": 2,
  "solcInputHash": "1997f911e2e62c45182c4517027b4b45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"source\",\"type\":\"uint8\"}],\"name\":\"registerAndPredictID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UpkeepIDConsumer.sol\":\"UpkeepIDConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice config of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member blockCountPerTurn number of blocks each oracle has during their turn to\\n * perform upkeep before it will be the next keeper's turn to submit\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct Config {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint24 blockCountPerTurn;\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member numUpkeeps total number of upkeeps on the registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint256 numUpkeeps;\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData\\n  ) external returns (uint256 id);\\n\\n  function performUpkeep(uint256 id, bytes calldata performData) external returns (bool success);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function getUpkeep(uint256 id)\\n    external\\n    view\\n    returns (\\n      address target,\\n      uint32 executeGas,\\n      bytes memory checkData,\\n      uint96 balance,\\n      address lastKeeper,\\n      address admin,\\n      uint64 maxValidBlocknumber,\\n      uint96 amountSpent\\n    );\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getKeeperInfo(address query)\\n    external\\n    view\\n    returns (\\n      address payee,\\n      bool active,\\n      uint96 balance\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory,\\n      Config memory,\\n      address[] memory\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    view\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      int256 gasWei,\\n      int256 linkEth\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      uint256 adjustedGasWei,\\n      uint256 linkEth\\n    );\\n}\\n\",\"keccak256\":\"0xc61d747194f2efd476204f9cf138f4028166d4723960fd66c7d316625ebe3ff6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"contracts/UpkeepIDConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport {AutomationRegistryInterface, State, Config} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\ninterface KeeperRegistrarInterface {\\r\\n  function register(\\r\\n    string memory name,\\r\\n    bytes calldata encryptedEmail,\\r\\n    address upkeepContract,\\r\\n    uint32 gasLimit,\\r\\n    address adminAddress,\\r\\n    bytes calldata checkData,\\r\\n    uint96 amount,\\r\\n    uint8 source,\\r\\n    address sender\\r\\n  ) external;\\r\\n}\\r\\n\\r\\ncontract UpkeepIDConsumer {\\r\\n  LinkTokenInterface public immutable i_link;\\r\\n  address public immutable registrar;\\r\\n  AutomationRegistryInterface public immutable i_registry;\\r\\n  bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\r\\n\\r\\n  constructor(\\r\\n    address _link,\\r\\n    address _registrar,\\r\\n    address _registry\\r\\n  ) {\\r\\n    i_link = LinkTokenInterface(_link);\\r\\n    registrar = _registrar;\\r\\n    i_registry = AutomationRegistryInterface(_registry);\\r\\n  }\\r\\n\\r\\n  function registerAndPredictID(\\r\\n    string memory name,\\r\\n    bytes calldata encryptedEmail,\\r\\n    address upkeepContract,\\r\\n    uint32 gasLimit,\\r\\n    address adminAddress,\\r\\n    bytes calldata checkData,\\r\\n    uint96 amount,\\r\\n    uint8 source\\r\\n  ) public returns(uint){\\r\\n    (State memory state, Config memory _c, address[] memory _k) = i_registry.getState();\\r\\n    uint256 oldNonce = state.nonce;\\r\\n    bytes memory payload = abi.encode(\\r\\n      name,\\r\\n      encryptedEmail,\\r\\n      upkeepContract,\\r\\n      gasLimit,\\r\\n      adminAddress,\\r\\n      checkData,\\r\\n      amount,\\r\\n      source,\\r\\n      address(this)\\r\\n    );\\r\\n\\r\\n    i_link.transferAndCall(\\r\\n      registrar,\\r\\n      amount,\\r\\n      bytes.concat(registerSig, payload)\\r\\n    );\\r\\n    (state, _c, _k) = i_registry.getState();\\r\\n    uint256 newNonce = state.nonce;\\r\\n    if (newNonce == oldNonce + 1) {\\r\\n      uint256 upkeepID = uint256(\\r\\n        keccak256(\\r\\n          abi.encodePacked(\\r\\n            blockhash(block.number - 1),\\r\\n            address(i_registry),\\r\\n            uint32(oldNonce)\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n      // DEV - Use the upkeepID however you see fit\\r\\n      return upkeepID;\\r\\n    } else {\\r\\n      revert(\\\"auto-approve disabled\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdac07cfb6213b5ce65e7b8b9f0be91828c4b0e27be5cc3d8d122610f7b6e3cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052633659d66660e01b6000806101000a81548163ffffffff021916908360e01c02179055503480156200003557600080fd5b506040516200153c3803806200153c83398181016040528101906200005b919062000173565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505050620001cf565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013b826200010e565b9050919050565b6200014d816200012e565b81146200015957600080fd5b50565b6000815190506200016d8162000142565b92915050565b6000806000606084860312156200018f576200018e62000109565b5b60006200019f868287016200015c565b9350506020620001b2868287016200015c565b9250506040620001c5868287016200015c565b9150509250925092565b60805160601c60a05160601c60c05160601c6113126200022a6000396000818160e3015281816102d1015281816103b3015261045a01526000818161020f015261047e0152600081816101d301526104a201526113126000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806318a9fb8a146100515780632a663606146100815780632b20e3971461009f5780637d253aff146100bd575b600080fd5b61006b60048036038101906100669190610795565b6100db565b60405161007891906108c1565b60405180910390f35b610089610458565b604051610096919061093b565b60405180910390f35b6100a761047c565b6040516100b49190610965565b60405180910390f35b6100c56104a0565b6040516100d291906109a1565b60405180910390f35b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561014757600080fd5b505afa15801561015b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101849190610cfe565b9250925092506000836000015163ffffffff16905060008f8f8f8f8f8f8f8f8f8f306040516020016101c09b9a99989796959493929190610e62565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008a60008054906101000a900460e01b8560405160200161024f929190610f9c565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161027c9392919061102e565b602060405180830381600087803b15801561029657600080fd5b505af11580156102aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ce91906110a4565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561033557600080fd5b505afa158015610349573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103729190610cfe565b8095508196508297505050506000856000015163ffffffff16905060018361039a9190611100565b81141561040f5760006001436103b09190611156565b407f0000000000000000000000000000000000000000000000000000000000000000856040516020016103e593929190611233565b6040516020818303038152906040528051906020012060001c90508097505050505050505061044a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610441906112bc565b60405180910390fd5b9a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61052b826104e2565b810181811067ffffffffffffffff8211171561054a576105496104f3565b5b80604052505050565b600061055d6104c4565b90506105698282610522565b919050565b600067ffffffffffffffff821115610589576105886104f3565b5b610592826104e2565b9050602081019050919050565b82818337600083830152505050565b60006105c16105bc8461056e565b610553565b9050828152602081018484840111156105dd576105dc6104dd565b5b6105e884828561059f565b509392505050565b600082601f830112610605576106046104d8565b5b81356106158482602086016105ae565b91505092915050565b600080fd5b600080fd5b60008083601f84011261063e5761063d6104d8565b5b8235905067ffffffffffffffff81111561065b5761065a61061e565b5b60208301915083600182028301111561067757610676610623565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a98261067e565b9050919050565b6106b98161069e565b81146106c457600080fd5b50565b6000813590506106d6816106b0565b92915050565b600063ffffffff82169050919050565b6106f5816106dc565b811461070057600080fd5b50565b600081359050610712816106ec565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61073981610718565b811461074457600080fd5b50565b60008135905061075681610730565b92915050565b600060ff82169050919050565b6107728161075c565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b6000806000806000806000806000806101008b8d0312156107b9576107b86104ce565b5b60008b013567ffffffffffffffff8111156107d7576107d66104d3565b5b6107e38d828e016105f0565b9a505060208b013567ffffffffffffffff811115610804576108036104d3565b5b6108108d828e01610628565b995099505060406108238d828e016106c7565b97505060606108348d828e01610703565b96505060806108458d828e016106c7565b95505060a08b013567ffffffffffffffff811115610866576108656104d3565b5b6108728d828e01610628565b945094505060c06108858d828e01610747565b92505060e06108968d828e01610780565b9150509295989b9194979a5092959850565b6000819050919050565b6108bb816108a8565b82525050565b60006020820190506108d660008301846108b2565b92915050565b6000819050919050565b60006109016108fc6108f78461067e565b6108dc565b61067e565b9050919050565b6000610913826108e6565b9050919050565b600061092582610908565b9050919050565b6109358161091a565b82525050565b6000602082019050610950600083018461092c565b92915050565b61095f8161069e565b82525050565b600060208201905061097a6000830184610956565b92915050565b600061098b82610908565b9050919050565b61099b81610980565b82525050565b60006020820190506109b66000830184610992565b92915050565b600080fd5b6000815190506109d0816106ec565b92915050565b6000815190506109e581610730565b92915050565b6109f4816108a8565b81146109ff57600080fd5b50565b600081519050610a11816109eb565b92915050565b600060808284031215610a2d57610a2c6109bc565b5b610a376080610553565b90506000610a47848285016109c1565b6000830152506020610a5b848285016109d6565b6020830152506040610a6f84828501610a02565b6040830152506060610a8384828501610a02565b60608301525092915050565b600062ffffff82169050919050565b610aa781610a8f565b8114610ab257600080fd5b50565b600081519050610ac481610a9e565b92915050565b600061ffff82169050919050565b610ae181610aca565b8114610aec57600080fd5b50565b600081519050610afe81610ad8565b92915050565b600081519050610b13816106b0565b92915050565b60006101808284031215610b3057610b2f6109bc565b5b610b3b610180610553565b90506000610b4b848285016109c1565b6000830152506020610b5f848285016109c1565b6020830152506040610b7384828501610ab5565b6040830152506060610b87848285016109c1565b6060830152506080610b9b84828501610ab5565b60808301525060a0610baf84828501610aef565b60a08301525060c0610bc3848285016109d6565b60c08301525060e0610bd7848285016109c1565b60e083015250610100610bec84828501610a02565b61010083015250610120610c0284828501610a02565b61012083015250610140610c1884828501610b04565b61014083015250610160610c2e84828501610b04565b6101608301525092915050565b600067ffffffffffffffff821115610c5657610c556104f3565b5b602082029050602081019050919050565b6000610c7a610c7584610c3b565b610553565b90508083825260208201905060208402830185811115610c9d57610c9c610623565b5b835b81811015610cc65780610cb28882610b04565b845260208401935050602081019050610c9f565b5050509392505050565b600082601f830112610ce557610ce46104d8565b5b8151610cf5848260208601610c67565b91505092915050565b60008060006102208486031215610d1857610d176104ce565b5b6000610d2686828701610a17565b9350506080610d3786828701610b19565b92505061020084015167ffffffffffffffff811115610d5957610d586104d3565b5b610d6586828701610cd0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610da9578082015181840152602081019050610d8e565b83811115610db8576000848401525b50505050565b6000610dc982610d6f565b610dd38185610d7a565b9350610de3818560208601610d8b565b610dec816104e2565b840191505092915050565b600082825260208201905092915050565b6000610e148385610df7565b9350610e2183858461059f565b610e2a836104e2565b840190509392505050565b610e3e816106dc565b82525050565b610e4d81610718565b82525050565b610e5c8161075c565b82525050565b6000610120820190508181036000830152610e7d818e610dbe565b90508181036020830152610e92818c8e610e08565b9050610ea1604083018b610956565b610eae606083018a610e35565b610ebb6080830189610956565b81810360a0830152610ece818789610e08565b9050610edd60c0830186610e44565b610eea60e0830185610e53565b610ef8610100830184610956565b9c9b505050505050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610f4f610f4a82610f08565b610f34565b82525050565b600081519050919050565b600081905092915050565b6000610f7682610f55565b610f808185610f60565b9350610f90818560208601610d8b565b80840191505092915050565b6000610fa88285610f3e565b600482019150610fb88284610f6b565b91508190509392505050565b6000610fdf610fda610fd584610718565b6108dc565b6108a8565b9050919050565b610fef81610fc4565b82525050565b600061100082610f55565b61100a8185610df7565b935061101a818560208601610d8b565b611023816104e2565b840191505092915050565b60006060820190506110436000830186610956565b6110506020830185610fe6565b81810360408301526110628184610ff5565b9050949350505050565b60008115159050919050565b6110818161106c565b811461108c57600080fd5b50565b60008151905061109e81611078565b92915050565b6000602082840312156110ba576110b96104ce565b5b60006110c88482850161108f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061110b826108a8565b9150611116836108a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561114b5761114a6110d1565b5b828201905092915050565b6000611161826108a8565b915061116c836108a8565b92508282101561117f5761117e6110d1565b5b828203905092915050565b6000819050919050565b6000819050919050565b6111af6111aa8261118a565b611194565b82525050565b60008160601b9050919050565b60006111cd826111b5565b9050919050565b60006111df826111c2565b9050919050565b6111f76111f28261069e565b6111d4565b82525050565b60008160e01b9050919050565b6000611215826111fd565b9050919050565b61122d611228826106dc565b61120a565b82525050565b600061123f828661119e565b60208201915061124f82856111e6565b60148201915061125f828461121c565b600482019150819050949350505050565b7f6175746f2d617070726f76652064697361626c65640000000000000000000000600082015250565b60006112a6601583610d7a565b91506112b182611270565b602082019050919050565b600060208201905081810360008301526112d581611299565b905091905056fea2646970667358221220242c5fa014d7028c30bddbc7659b52e220729c5c0a47e11fe4a02a3054f97e6564736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1773,
        "contract": "contracts/UpkeepIDConsumer.sol:UpkeepIDConsumer",
        "label": "registerSig",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes4"
      }
    ],
    "types": {
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      }
    }
  }
}